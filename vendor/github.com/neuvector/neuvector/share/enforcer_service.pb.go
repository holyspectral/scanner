// Code generated by protoc-gen-go. DO NOT EDIT.
// source: enforcer_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SnifferCmd int32

const (
	SnifferCmd_StartSniffer  SnifferCmd = 0
	SnifferCmd_StopSniffer   SnifferCmd = 1
	SnifferCmd_RemoveSniffer SnifferCmd = 2
)

var SnifferCmd_name = map[int32]string{
	0: "StartSniffer",
	1: "StopSniffer",
	2: "RemoveSniffer",
}
var SnifferCmd_value = map[string]int32{
	"StartSniffer":  0,
	"StopSniffer":   1,
	"RemoveSniffer": 2,
}

func (x SnifferCmd) String() string {
	return proto.EnumName(SnifferCmd_name, int32(x))
}
func (SnifferCmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{0}
}

type SnifferStatus int32

const (
	SnifferStatus_Failed  SnifferStatus = 0
	SnifferStatus_Running SnifferStatus = 1
	SnifferStatus_Stopped SnifferStatus = 2
)

var SnifferStatus_name = map[int32]string{
	0: "Failed",
	1: "Running",
	2: "Stopped",
}
var SnifferStatus_value = map[string]int32{
	"Failed":  0,
	"Running": 1,
	"Stopped": 2,
}

func (x SnifferStatus) String() string {
	return proto.EnumName(SnifferStatus_name, int32(x))
}
func (SnifferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{1}
}

type CLUSKick struct {
	CtrlID               string   `protobuf:"bytes,1,opt,name=CtrlID,proto3" json:"CtrlID,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSKick) Reset()         { *m = CLUSKick{} }
func (m *CLUSKick) String() string { return proto.CompactTextString(m) }
func (*CLUSKick) ProtoMessage()    {}
func (*CLUSKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{0}
}
func (m *CLUSKick) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSKick.Unmarshal(m, b)
}
func (m *CLUSKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSKick.Marshal(b, m, deterministic)
}
func (dst *CLUSKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSKick.Merge(dst, src)
}
func (m *CLUSKick) XXX_Size() int {
	return xxx_messageInfo_CLUSKick.Size(m)
}
func (m *CLUSKick) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSKick.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSKick proto.InternalMessageInfo

func (m *CLUSKick) GetCtrlID() string {
	if m != nil {
		return m.CtrlID
	}
	return ""
}

func (m *CLUSKick) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type CLUSFilter struct {
	Workload             string   `protobuf:"bytes,1,opt,name=Workload,proto3" json:"Workload,omitempty"`
	ID                   uint32   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Start                uint32   `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                uint32   `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSFilter) Reset()         { *m = CLUSFilter{} }
func (m *CLUSFilter) String() string { return proto.CompactTextString(m) }
func (*CLUSFilter) ProtoMessage()    {}
func (*CLUSFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{1}
}
func (m *CLUSFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFilter.Unmarshal(m, b)
}
func (m *CLUSFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFilter.Marshal(b, m, deterministic)
}
func (dst *CLUSFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFilter.Merge(dst, src)
}
func (m *CLUSFilter) XXX_Size() int {
	return xxx_messageInfo_CLUSFilter.Size(m)
}
func (m *CLUSFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFilter proto.InternalMessageInfo

func (m *CLUSFilter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSFilter) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSFilter) GetStart() uint32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CLUSFilter) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CLUSSession struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Workload             string   `protobuf:"bytes,2,opt,name=Workload,proto3" json:"Workload,omitempty"`
	EtherType            uint32   `protobuf:"varint,3,opt,name=EtherType,proto3" json:"EtherType,omitempty"`
	IPProto              uint32   `protobuf:"varint,4,opt,name=IPProto,proto3" json:"IPProto,omitempty"`
	ClientMAC            []byte   `protobuf:"bytes,5,opt,name=ClientMAC,proto3" json:"ClientMAC,omitempty"`
	ServerMAC            []byte   `protobuf:"bytes,6,opt,name=ServerMAC,proto3" json:"ServerMAC,omitempty"`
	ClientIP             []byte   `protobuf:"bytes,7,opt,name=ClientIP,proto3" json:"ClientIP,omitempty"`
	ServerIP             []byte   `protobuf:"bytes,8,opt,name=ServerIP,proto3" json:"ServerIP,omitempty"`
	ClientPort           uint32   `protobuf:"varint,9,opt,name=ClientPort,proto3" json:"ClientPort,omitempty"`
	ServerPort           uint32   `protobuf:"varint,10,opt,name=ServerPort,proto3" json:"ServerPort,omitempty"`
	ICMPCode             uint32   `protobuf:"varint,11,opt,name=ICMPCode,proto3" json:"ICMPCode,omitempty"`
	ICMPType             uint32   `protobuf:"varint,12,opt,name=ICMPType,proto3" json:"ICMPType,omitempty"`
	ClientState          uint32   `protobuf:"varint,13,opt,name=ClientState,proto3" json:"ClientState,omitempty"`
	ServerState          uint32   `protobuf:"varint,14,opt,name=ServerState,proto3" json:"ServerState,omitempty"`
	ClientPkts           uint32   `protobuf:"varint,15,opt,name=ClientPkts,proto3" json:"ClientPkts,omitempty"`
	ServerPkts           uint32   `protobuf:"varint,16,opt,name=ServerPkts,proto3" json:"ServerPkts,omitempty"`
	ClientBytes          uint64   `protobuf:"varint,17,opt,name=ClientBytes,proto3" json:"ClientBytes,omitempty"`
	ServerBytes          uint64   `protobuf:"varint,18,opt,name=ServerBytes,proto3" json:"ServerBytes,omitempty"`
	Application          uint32   `protobuf:"varint,19,opt,name=Application,proto3" json:"Application,omitempty"`
	Age                  uint32   `protobuf:"varint,20,opt,name=Age,proto3" json:"Age,omitempty"`
	Idle                 uint32   `protobuf:"varint,21,opt,name=Idle,proto3" json:"Idle,omitempty"`
	Life                 uint32   `protobuf:"varint,22,opt,name=Life,proto3" json:"Life,omitempty"`
	Ingress              bool     `protobuf:"varint,23,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	Tap                  bool     `protobuf:"varint,24,opt,name=Tap,proto3" json:"Tap,omitempty"`
	Mid                  bool     `protobuf:"varint,25,opt,name=Mid,proto3" json:"Mid,omitempty"`
	PolicyId             uint32   `protobuf:"varint,26,opt,name=PolicyId,proto3" json:"PolicyId,omitempty"`
	PolicyAction         uint32   `protobuf:"varint,27,opt,name=PolicyAction,proto3" json:"PolicyAction,omitempty"`
	ClientAsmPkts        uint32   `protobuf:"varint,28,opt,name=ClientAsmPkts,proto3" json:"ClientAsmPkts,omitempty"`
	ServerAsmPkts        uint32   `protobuf:"varint,29,opt,name=ServerAsmPkts,proto3" json:"ServerAsmPkts,omitempty"`
	ClientAsmBytes       uint64   `protobuf:"varint,30,opt,name=ClientAsmBytes,proto3" json:"ClientAsmBytes,omitempty"`
	ServerAsmBytes       uint64   `protobuf:"varint,31,opt,name=ServerAsmBytes,proto3" json:"ServerAsmBytes,omitempty"`
	HostMode             bool     `protobuf:"varint,32,opt,name=HostMode,proto3" json:"HostMode,omitempty"`
	XffIP                []byte   `protobuf:"bytes,33,opt,name=XffIP,proto3" json:"XffIP,omitempty"`
	XffApp               uint32   `protobuf:"varint,34,opt,name=XffApp,proto3" json:"XffApp,omitempty"`
	XffPort              uint32   `protobuf:"varint,35,opt,name=XffPort,proto3" json:"XffPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSession) Reset()         { *m = CLUSSession{} }
func (m *CLUSSession) String() string { return proto.CompactTextString(m) }
func (*CLUSSession) ProtoMessage()    {}
func (*CLUSSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{2}
}
func (m *CLUSSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSession.Unmarshal(m, b)
}
func (m *CLUSSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSession.Marshal(b, m, deterministic)
}
func (dst *CLUSSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSession.Merge(dst, src)
}
func (m *CLUSSession) XXX_Size() int {
	return xxx_messageInfo_CLUSSession.Size(m)
}
func (m *CLUSSession) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSession.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSession proto.InternalMessageInfo

func (m *CLUSSession) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSSession) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSSession) GetEtherType() uint32 {
	if m != nil {
		return m.EtherType
	}
	return 0
}

func (m *CLUSSession) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSSession) GetClientMAC() []byte {
	if m != nil {
		return m.ClientMAC
	}
	return nil
}

func (m *CLUSSession) GetServerMAC() []byte {
	if m != nil {
		return m.ServerMAC
	}
	return nil
}

func (m *CLUSSession) GetClientIP() []byte {
	if m != nil {
		return m.ClientIP
	}
	return nil
}

func (m *CLUSSession) GetServerIP() []byte {
	if m != nil {
		return m.ServerIP
	}
	return nil
}

func (m *CLUSSession) GetClientPort() uint32 {
	if m != nil {
		return m.ClientPort
	}
	return 0
}

func (m *CLUSSession) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CLUSSession) GetICMPCode() uint32 {
	if m != nil {
		return m.ICMPCode
	}
	return 0
}

func (m *CLUSSession) GetICMPType() uint32 {
	if m != nil {
		return m.ICMPType
	}
	return 0
}

func (m *CLUSSession) GetClientState() uint32 {
	if m != nil {
		return m.ClientState
	}
	return 0
}

func (m *CLUSSession) GetServerState() uint32 {
	if m != nil {
		return m.ServerState
	}
	return 0
}

func (m *CLUSSession) GetClientPkts() uint32 {
	if m != nil {
		return m.ClientPkts
	}
	return 0
}

func (m *CLUSSession) GetServerPkts() uint32 {
	if m != nil {
		return m.ServerPkts
	}
	return 0
}

func (m *CLUSSession) GetClientBytes() uint64 {
	if m != nil {
		return m.ClientBytes
	}
	return 0
}

func (m *CLUSSession) GetServerBytes() uint64 {
	if m != nil {
		return m.ServerBytes
	}
	return 0
}

func (m *CLUSSession) GetApplication() uint32 {
	if m != nil {
		return m.Application
	}
	return 0
}

func (m *CLUSSession) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *CLUSSession) GetIdle() uint32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CLUSSession) GetLife() uint32 {
	if m != nil {
		return m.Life
	}
	return 0
}

func (m *CLUSSession) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSSession) GetTap() bool {
	if m != nil {
		return m.Tap
	}
	return false
}

func (m *CLUSSession) GetMid() bool {
	if m != nil {
		return m.Mid
	}
	return false
}

func (m *CLUSSession) GetPolicyId() uint32 {
	if m != nil {
		return m.PolicyId
	}
	return 0
}

func (m *CLUSSession) GetPolicyAction() uint32 {
	if m != nil {
		return m.PolicyAction
	}
	return 0
}

func (m *CLUSSession) GetClientAsmPkts() uint32 {
	if m != nil {
		return m.ClientAsmPkts
	}
	return 0
}

func (m *CLUSSession) GetServerAsmPkts() uint32 {
	if m != nil {
		return m.ServerAsmPkts
	}
	return 0
}

func (m *CLUSSession) GetClientAsmBytes() uint64 {
	if m != nil {
		return m.ClientAsmBytes
	}
	return 0
}

func (m *CLUSSession) GetServerAsmBytes() uint64 {
	if m != nil {
		return m.ServerAsmBytes
	}
	return 0
}

func (m *CLUSSession) GetHostMode() bool {
	if m != nil {
		return m.HostMode
	}
	return false
}

func (m *CLUSSession) GetXffIP() []byte {
	if m != nil {
		return m.XffIP
	}
	return nil
}

func (m *CLUSSession) GetXffApp() uint32 {
	if m != nil {
		return m.XffApp
	}
	return 0
}

func (m *CLUSSession) GetXffPort() uint32 {
	if m != nil {
		return m.XffPort
	}
	return 0
}

type CLUSSessionArray struct {
	Sessions             []*CLUSSession `protobuf:"bytes,1,rep,name=Sessions,proto3" json:"Sessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CLUSSessionArray) Reset()         { *m = CLUSSessionArray{} }
func (m *CLUSSessionArray) String() string { return proto.CompactTextString(m) }
func (*CLUSSessionArray) ProtoMessage()    {}
func (*CLUSSessionArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{3}
}
func (m *CLUSSessionArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSessionArray.Unmarshal(m, b)
}
func (m *CLUSSessionArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSessionArray.Marshal(b, m, deterministic)
}
func (dst *CLUSSessionArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSessionArray.Merge(dst, src)
}
func (m *CLUSSessionArray) XXX_Size() int {
	return xxx_messageInfo_CLUSSessionArray.Size(m)
}
func (m *CLUSSessionArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSessionArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSessionArray proto.InternalMessageInfo

func (m *CLUSSessionArray) GetSessions() []*CLUSSession {
	if m != nil {
		return m.Sessions
	}
	return nil
}

type CLUSSessionCounter struct {
	CurSessions          uint32   `protobuf:"varint,1,opt,name=CurSessions,proto3" json:"CurSessions,omitempty"`
	CurTCPSessions       uint32   `protobuf:"varint,2,opt,name=CurTCPSessions,proto3" json:"CurTCPSessions,omitempty"`
	CurUDPSessions       uint32   `protobuf:"varint,3,opt,name=CurUDPSessions,proto3" json:"CurUDPSessions,omitempty"`
	CurICMPSessions      uint32   `protobuf:"varint,4,opt,name=CurICMPSessions,proto3" json:"CurICMPSessions,omitempty"`
	CurIPSessions        uint32   `protobuf:"varint,5,opt,name=CurIPSessions,proto3" json:"CurIPSessions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSessionCounter) Reset()         { *m = CLUSSessionCounter{} }
func (m *CLUSSessionCounter) String() string { return proto.CompactTextString(m) }
func (*CLUSSessionCounter) ProtoMessage()    {}
func (*CLUSSessionCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{4}
}
func (m *CLUSSessionCounter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSessionCounter.Unmarshal(m, b)
}
func (m *CLUSSessionCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSessionCounter.Marshal(b, m, deterministic)
}
func (dst *CLUSSessionCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSessionCounter.Merge(dst, src)
}
func (m *CLUSSessionCounter) XXX_Size() int {
	return xxx_messageInfo_CLUSSessionCounter.Size(m)
}
func (m *CLUSSessionCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSessionCounter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSessionCounter proto.InternalMessageInfo

func (m *CLUSSessionCounter) GetCurSessions() uint32 {
	if m != nil {
		return m.CurSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurTCPSessions() uint32 {
	if m != nil {
		return m.CurTCPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurUDPSessions() uint32 {
	if m != nil {
		return m.CurUDPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurICMPSessions() uint32 {
	if m != nil {
		return m.CurICMPSessions
	}
	return 0
}

func (m *CLUSSessionCounter) GetCurIPSessions() uint32 {
	if m != nil {
		return m.CurIPSessions
	}
	return 0
}

type CLUSDatapathCounter struct {
	RXPackets            uint64   `protobuf:"varint,1,opt,name=RXPackets,proto3" json:"RXPackets,omitempty"`
	RXDropPackets        uint64   `protobuf:"varint,2,opt,name=RXDropPackets,proto3" json:"RXDropPackets,omitempty"`
	TXPackets            uint64   `protobuf:"varint,3,opt,name=TXPackets,proto3" json:"TXPackets,omitempty"`
	TXDropPackets        uint64   `protobuf:"varint,4,opt,name=TXDropPackets,proto3" json:"TXDropPackets,omitempty"`
	ErrorPackets         uint64   `protobuf:"varint,5,opt,name=ErrorPackets,proto3" json:"ErrorPackets,omitempty"`
	NoWorkloadPackets    uint64   `protobuf:"varint,6,opt,name=NoWorkloadPackets,proto3" json:"NoWorkloadPackets,omitempty"`
	IPv4Packets          uint64   `protobuf:"varint,7,opt,name=IPv4Packets,proto3" json:"IPv4Packets,omitempty"`
	IPv6Packets          uint64   `protobuf:"varint,8,opt,name=IPv6Packets,proto3" json:"IPv6Packets,omitempty"`
	TCPPackets           uint64   `protobuf:"varint,9,opt,name=TCPPackets,proto3" json:"TCPPackets,omitempty"`
	TCPNoSessionPackets  uint64   `protobuf:"varint,10,opt,name=TCPNoSessionPackets,proto3" json:"TCPNoSessionPackets,omitempty"`
	UDPPackets           uint64   `protobuf:"varint,11,opt,name=UDPPackets,proto3" json:"UDPPackets,omitempty"`
	ICMPPackets          uint64   `protobuf:"varint,12,opt,name=ICMPPackets,proto3" json:"ICMPPackets,omitempty"`
	OtherPackets         uint64   `protobuf:"varint,13,opt,name=OtherPackets,proto3" json:"OtherPackets,omitempty"`
	Fragments            uint64   `protobuf:"varint,14,opt,name=Fragments,proto3" json:"Fragments,omitempty"`
	TimeoutFragments     uint64   `protobuf:"varint,15,opt,name=TimeoutFragments,proto3" json:"TimeoutFragments,omitempty"`
	TotalSessions        uint64   `protobuf:"varint,16,opt,name=TotalSessions,proto3" json:"TotalSessions,omitempty"`
	TCPSessions          uint64   `protobuf:"varint,17,opt,name=TCPSessions,proto3" json:"TCPSessions,omitempty"`
	UDPSessions          uint64   `protobuf:"varint,18,opt,name=UDPSessions,proto3" json:"UDPSessions,omitempty"`
	ICMPSessions         uint64   `protobuf:"varint,19,opt,name=ICMPSessions,proto3" json:"ICMPSessions,omitempty"`
	IPSessions           uint64   `protobuf:"varint,20,opt,name=IPSessions,proto3" json:"IPSessions,omitempty"`
	DropMeters           uint64   `protobuf:"varint,21,opt,name=DropMeters,proto3" json:"DropMeters,omitempty"`
	ProxyMeters          uint64   `protobuf:"varint,22,opt,name=ProxyMeters,proto3" json:"ProxyMeters,omitempty"`
	CurMeters            uint64   `protobuf:"varint,23,opt,name=CurMeters,proto3" json:"CurMeters,omitempty"`
	CurLogCaches         uint64   `protobuf:"varint,24,opt,name=CurLogCaches,proto3" json:"CurLogCaches,omitempty"`
	FreedFragments       uint64   `protobuf:"varint,25,opt,name=FreedFragments,proto3" json:"FreedFragments,omitempty"`
	Assemblys            uint64   `protobuf:"varint,26,opt,name=Assemblys,proto3" json:"Assemblys,omitempty"`
	FreedAssemblys       uint64   `protobuf:"varint,27,opt,name=FreedAssemblys,proto3" json:"FreedAssemblys,omitempty"`
	ParserSessions       []uint64 `protobuf:"varint,28,rep,packed,name=ParserSessions,proto3" json:"ParserSessions,omitempty"`
	ParserPackets        []uint64 `protobuf:"varint,29,rep,packed,name=ParserPackets,proto3" json:"ParserPackets,omitempty"`
	PolicyType1Rules     uint32   `protobuf:"varint,30,opt,name=PolicyType1Rules,proto3" json:"PolicyType1Rules,omitempty"`
	PolicyType2Rules     uint32   `protobuf:"varint,31,opt,name=PolicyType2Rules,proto3" json:"PolicyType2Rules,omitempty"`
	PolicyDomains        uint32   `protobuf:"varint,32,opt,name=PolicyDomains,proto3" json:"PolicyDomains,omitempty"`
	PolicyDomainIPs      uint32   `protobuf:"varint,33,opt,name=PolicyDomainIPs,proto3" json:"PolicyDomainIPs,omitempty"`
	GoRoutines           uint32   `protobuf:"varint,34,opt,name=GoRoutines,proto3" json:"GoRoutines,omitempty"`
	Lsof                 []byte   `protobuf:"bytes,35,opt,name=Lsof,proto3" json:"Lsof,omitempty"`
	PS                   []byte   `protobuf:"bytes,36,opt,name=PS,proto3" json:"PS,omitempty"`
	LimitDropConns       uint64   `protobuf:"varint,37,opt,name=LimitDropConns,proto3" json:"LimitDropConns,omitempty"`
	LimitPassConns       uint64   `protobuf:"varint,38,opt,name=LimitPassConns,proto3" json:"LimitPassConns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDatapathCounter) Reset()         { *m = CLUSDatapathCounter{} }
func (m *CLUSDatapathCounter) String() string { return proto.CompactTextString(m) }
func (*CLUSDatapathCounter) ProtoMessage()    {}
func (*CLUSDatapathCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{5}
}
func (m *CLUSDatapathCounter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDatapathCounter.Unmarshal(m, b)
}
func (m *CLUSDatapathCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDatapathCounter.Marshal(b, m, deterministic)
}
func (dst *CLUSDatapathCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDatapathCounter.Merge(dst, src)
}
func (m *CLUSDatapathCounter) XXX_Size() int {
	return xxx_messageInfo_CLUSDatapathCounter.Size(m)
}
func (m *CLUSDatapathCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDatapathCounter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDatapathCounter proto.InternalMessageInfo

func (m *CLUSDatapathCounter) GetRXPackets() uint64 {
	if m != nil {
		return m.RXPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetRXDropPackets() uint64 {
	if m != nil {
		return m.RXDropPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTXPackets() uint64 {
	if m != nil {
		return m.TXPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTXDropPackets() uint64 {
	if m != nil {
		return m.TXDropPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetErrorPackets() uint64 {
	if m != nil {
		return m.ErrorPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetNoWorkloadPackets() uint64 {
	if m != nil {
		return m.NoWorkloadPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPv4Packets() uint64 {
	if m != nil {
		return m.IPv4Packets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPv6Packets() uint64 {
	if m != nil {
		return m.IPv6Packets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPPackets() uint64 {
	if m != nil {
		return m.TCPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPNoSessionPackets() uint64 {
	if m != nil {
		return m.TCPNoSessionPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetUDPPackets() uint64 {
	if m != nil {
		return m.UDPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetICMPPackets() uint64 {
	if m != nil {
		return m.ICMPPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetOtherPackets() uint64 {
	if m != nil {
		return m.OtherPackets
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFragments() uint64 {
	if m != nil {
		return m.Fragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTimeoutFragments() uint64 {
	if m != nil {
		return m.TimeoutFragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTotalSessions() uint64 {
	if m != nil {
		return m.TotalSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetTCPSessions() uint64 {
	if m != nil {
		return m.TCPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetUDPSessions() uint64 {
	if m != nil {
		return m.UDPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetICMPSessions() uint64 {
	if m != nil {
		return m.ICMPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetIPSessions() uint64 {
	if m != nil {
		return m.IPSessions
	}
	return 0
}

func (m *CLUSDatapathCounter) GetDropMeters() uint64 {
	if m != nil {
		return m.DropMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetProxyMeters() uint64 {
	if m != nil {
		return m.ProxyMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetCurMeters() uint64 {
	if m != nil {
		return m.CurMeters
	}
	return 0
}

func (m *CLUSDatapathCounter) GetCurLogCaches() uint64 {
	if m != nil {
		return m.CurLogCaches
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFreedFragments() uint64 {
	if m != nil {
		return m.FreedFragments
	}
	return 0
}

func (m *CLUSDatapathCounter) GetAssemblys() uint64 {
	if m != nil {
		return m.Assemblys
	}
	return 0
}

func (m *CLUSDatapathCounter) GetFreedAssemblys() uint64 {
	if m != nil {
		return m.FreedAssemblys
	}
	return 0
}

func (m *CLUSDatapathCounter) GetParserSessions() []uint64 {
	if m != nil {
		return m.ParserSessions
	}
	return nil
}

func (m *CLUSDatapathCounter) GetParserPackets() []uint64 {
	if m != nil {
		return m.ParserPackets
	}
	return nil
}

func (m *CLUSDatapathCounter) GetPolicyType1Rules() uint32 {
	if m != nil {
		return m.PolicyType1Rules
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyType2Rules() uint32 {
	if m != nil {
		return m.PolicyType2Rules
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyDomains() uint32 {
	if m != nil {
		return m.PolicyDomains
	}
	return 0
}

func (m *CLUSDatapathCounter) GetPolicyDomainIPs() uint32 {
	if m != nil {
		return m.PolicyDomainIPs
	}
	return 0
}

func (m *CLUSDatapathCounter) GetGoRoutines() uint32 {
	if m != nil {
		return m.GoRoutines
	}
	return 0
}

func (m *CLUSDatapathCounter) GetLsof() []byte {
	if m != nil {
		return m.Lsof
	}
	return nil
}

func (m *CLUSDatapathCounter) GetPS() []byte {
	if m != nil {
		return m.PS
	}
	return nil
}

func (m *CLUSDatapathCounter) GetLimitDropConns() uint64 {
	if m != nil {
		return m.LimitDropConns
	}
	return 0
}

func (m *CLUSDatapathCounter) GetLimitPassConns() uint64 {
	if m != nil {
		return m.LimitPassConns
	}
	return 0
}

type CLUSDerivedPolicyApp struct {
	App                  uint32   `protobuf:"varint,1,opt,name=App,proto3" json:"App,omitempty"`
	Action               uint32   `protobuf:"varint,2,opt,name=Action,proto3" json:"Action,omitempty"`
	RuleID               uint32   `protobuf:"varint,3,opt,name=RuleID,proto3" json:"RuleID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedPolicyApp) Reset()         { *m = CLUSDerivedPolicyApp{} }
func (m *CLUSDerivedPolicyApp) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyApp) ProtoMessage()    {}
func (*CLUSDerivedPolicyApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{6}
}
func (m *CLUSDerivedPolicyApp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedPolicyApp.Unmarshal(m, b)
}
func (m *CLUSDerivedPolicyApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedPolicyApp.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedPolicyApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedPolicyApp.Merge(dst, src)
}
func (m *CLUSDerivedPolicyApp) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedPolicyApp.Size(m)
}
func (m *CLUSDerivedPolicyApp) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedPolicyApp.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedPolicyApp proto.InternalMessageInfo

func (m *CLUSDerivedPolicyApp) GetApp() uint32 {
	if m != nil {
		return m.App
	}
	return 0
}

func (m *CLUSDerivedPolicyApp) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *CLUSDerivedPolicyApp) GetRuleID() uint32 {
	if m != nil {
		return m.RuleID
	}
	return 0
}

type CLUSDerivedPolicyRule struct {
	ID                   uint32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SrcIP                []byte                  `protobuf:"bytes,2,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP                []byte                  `protobuf:"bytes,3,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcIPR               []byte                  `protobuf:"bytes,4,opt,name=SrcIPR,proto3" json:"SrcIPR,omitempty"`
	DstIPR               []byte                  `protobuf:"bytes,5,opt,name=DstIPR,proto3" json:"DstIPR,omitempty"`
	Port                 uint32                  `protobuf:"varint,6,opt,name=Port,proto3" json:"Port,omitempty"`
	PortR                uint32                  `protobuf:"varint,7,opt,name=PortR,proto3" json:"PortR,omitempty"`
	IPProto              uint32                  `protobuf:"varint,8,opt,name=IPProto,proto3" json:"IPProto,omitempty"`
	Action               uint32                  `protobuf:"varint,9,opt,name=Action,proto3" json:"Action,omitempty"`
	Ingress              bool                    `protobuf:"varint,10,opt,name=Ingress,proto3" json:"Ingress,omitempty"`
	FQDN                 string                  `protobuf:"bytes,11,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	Apps                 []*CLUSDerivedPolicyApp `protobuf:"bytes,12,rep,name=Apps,proto3" json:"Apps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CLUSDerivedPolicyRule) Reset()         { *m = CLUSDerivedPolicyRule{} }
func (m *CLUSDerivedPolicyRule) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRule) ProtoMessage()    {}
func (*CLUSDerivedPolicyRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{7}
}
func (m *CLUSDerivedPolicyRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedPolicyRule.Unmarshal(m, b)
}
func (m *CLUSDerivedPolicyRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedPolicyRule.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedPolicyRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedPolicyRule.Merge(dst, src)
}
func (m *CLUSDerivedPolicyRule) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedPolicyRule.Size(m)
}
func (m *CLUSDerivedPolicyRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedPolicyRule.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedPolicyRule proto.InternalMessageInfo

func (m *CLUSDerivedPolicyRule) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetSrcIP() []byte {
	if m != nil {
		return m.SrcIP
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetDstIP() []byte {
	if m != nil {
		return m.DstIP
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetSrcIPR() []byte {
	if m != nil {
		return m.SrcIPR
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetDstIPR() []byte {
	if m != nil {
		return m.DstIPR
	}
	return nil
}

func (m *CLUSDerivedPolicyRule) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetPortR() uint32 {
	if m != nil {
		return m.PortR
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetIPProto() uint32 {
	if m != nil {
		return m.IPProto
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *CLUSDerivedPolicyRule) GetIngress() bool {
	if m != nil {
		return m.Ingress
	}
	return false
}

func (m *CLUSDerivedPolicyRule) GetFQDN() string {
	if m != nil {
		return m.FQDN
	}
	return ""
}

func (m *CLUSDerivedPolicyRule) GetApps() []*CLUSDerivedPolicyApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

type CLUSDerivedPolicyRuleArray struct {
	Rules                []*CLUSDerivedPolicyRule `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CLUSDerivedPolicyRuleArray) Reset()         { *m = CLUSDerivedPolicyRuleArray{} }
func (m *CLUSDerivedPolicyRuleArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRuleArray) ProtoMessage()    {}
func (*CLUSDerivedPolicyRuleArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{8}
}
func (m *CLUSDerivedPolicyRuleArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedPolicyRuleArray.Unmarshal(m, b)
}
func (m *CLUSDerivedPolicyRuleArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedPolicyRuleArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedPolicyRuleArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedPolicyRuleArray.Merge(dst, src)
}
func (m *CLUSDerivedPolicyRuleArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedPolicyRuleArray.Size(m)
}
func (m *CLUSDerivedPolicyRuleArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedPolicyRuleArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedPolicyRuleArray proto.InternalMessageInfo

func (m *CLUSDerivedPolicyRuleArray) GetRules() []*CLUSDerivedPolicyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSDerivedPolicyRuleMap struct {
	RuleMap              map[string]*CLUSDerivedPolicyRuleArray `protobuf:"bytes,1,rep,name=RuleMap,proto3" json:"RuleMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *CLUSDerivedPolicyRuleMap) Reset()         { *m = CLUSDerivedPolicyRuleMap{} }
func (m *CLUSDerivedPolicyRuleMap) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedPolicyRuleMap) ProtoMessage()    {}
func (*CLUSDerivedPolicyRuleMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{9}
}
func (m *CLUSDerivedPolicyRuleMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedPolicyRuleMap.Unmarshal(m, b)
}
func (m *CLUSDerivedPolicyRuleMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedPolicyRuleMap.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedPolicyRuleMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedPolicyRuleMap.Merge(dst, src)
}
func (m *CLUSDerivedPolicyRuleMap) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedPolicyRuleMap.Size(m)
}
func (m *CLUSDerivedPolicyRuleMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedPolicyRuleMap.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedPolicyRuleMap proto.InternalMessageInfo

func (m *CLUSDerivedPolicyRuleMap) GetRuleMap() map[string]*CLUSDerivedPolicyRuleArray {
	if m != nil {
		return m.RuleMap
	}
	return nil
}

type CLUSProbeSummary struct {
	ContainerMap         uint32   `protobuf:"varint,1,opt,name=ContainerMap,proto3" json:"ContainerMap,omitempty"`
	PidContainerMap      uint32   `protobuf:"varint,2,opt,name=PidContainerMap,proto3" json:"PidContainerMap,omitempty"`
	PidProcMap           uint32   `protobuf:"varint,3,opt,name=PidProcMap,proto3" json:"PidProcMap,omitempty"`
	NewProcesses         uint32   `protobuf:"varint,4,opt,name=NewProcesses,proto3" json:"NewProcesses,omitempty"`
	NewSuspicProc        uint32   `protobuf:"varint,5,opt,name=NewSuspicProc,proto3" json:"NewSuspicProc,omitempty"`
	ContainerStops       uint32   `protobuf:"varint,6,opt,name=ContainerStops,proto3" json:"ContainerStops,omitempty"`
	WLStorageWatch       uint32   `protobuf:"varint,7,opt,name=WLStorageWatch,proto3" json:"WLStorageWatch,omitempty"` // Deprecated: Do not use.
	PidSet               uint32   `protobuf:"varint,8,opt,name=PidSet,proto3" json:"PidSet,omitempty"`
	SessionTable         uint32   `protobuf:"varint,9,opt,name=SessionTable,proto3" json:"SessionTable,omitempty"`
	InotifyWatches       uint32   `protobuf:"varint,10,opt,name=InotifyWatches,proto3" json:"InotifyWatches,omitempty"`
	ProcBlockRoots       uint32   `protobuf:"varint,11,opt,name=ProcBlockRoots,proto3" json:"ProcBlockRoots,omitempty"`
	ProcBlockMarks       uint32   `protobuf:"varint,12,opt,name=ProcBlockMarks,proto3" json:"ProcBlockMarks,omitempty"`
	ProcBlockEntryCnt    uint32   `protobuf:"varint,13,opt,name=ProcBlockEntryCnt,proto3" json:"ProcBlockEntryCnt,omitempty"`
	ProcBlockDirMonCnt   uint32   `protobuf:"varint,14,opt,name=ProcBlockDirMonCnt,proto3" json:"ProcBlockDirMonCnt,omitempty"`
	FileMonEvents        uint32   `protobuf:"varint,15,opt,name=FileMonEvents,proto3" json:"FileMonEvents,omitempty"`
	FileMonGroups        uint32   `protobuf:"varint,16,opt,name=FileMonGroups,proto3" json:"FileMonGroups,omitempty"`
	FileMonFaRoots       uint32   `protobuf:"varint,17,opt,name=FileMonFaRoots,proto3" json:"FileMonFaRoots,omitempty"`
	FileMonFaMntRoots    uint32   `protobuf:"varint,18,opt,name=FileMonFaMntRoots,proto3" json:"FileMonFaMntRoots,omitempty"`
	FileMonFaDirMarks    uint32   `protobuf:"varint,19,opt,name=FileMonFaDirMarks,proto3" json:"FileMonFaDirMarks,omitempty"`
	FileMonFaRules       uint32   `protobuf:"varint,20,opt,name=FileMonFaRules,proto3" json:"FileMonFaRules,omitempty"`
	FileMonFaPaths       uint32   `protobuf:"varint,21,opt,name=FileMonFaPaths,proto3" json:"FileMonFaPaths,omitempty"`
	FileMonFaDirs        uint32   `protobuf:"varint,22,opt,name=FileMonFaDirs,proto3" json:"FileMonFaDirs,omitempty"`
	FileMonInWds         uint32   `protobuf:"varint,23,opt,name=FileMonInWds,proto3" json:"FileMonInWds,omitempty"`
	FileMonInPaths       uint32   `protobuf:"varint,24,opt,name=FileMonInPaths,proto3" json:"FileMonInPaths,omitempty"`
	FileMonInDirs        uint32   `protobuf:"varint,25,opt,name=FileMonInDirs,proto3" json:"FileMonInDirs,omitempty"`
	MaxEvalChanQueued    uint32   `protobuf:"varint,26,opt,name=MaxEvalChanQueued,proto3" json:"MaxEvalChanQueued,omitempty"`
	MaxGoroutines        uint32   `protobuf:"varint,27,opt,name=MaxGoroutines,proto3" json:"MaxGoroutines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSProbeSummary) Reset()         { *m = CLUSProbeSummary{} }
func (m *CLUSProbeSummary) String() string { return proto.CompactTextString(m) }
func (*CLUSProbeSummary) ProtoMessage()    {}
func (*CLUSProbeSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{10}
}
func (m *CLUSProbeSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProbeSummary.Unmarshal(m, b)
}
func (m *CLUSProbeSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProbeSummary.Marshal(b, m, deterministic)
}
func (dst *CLUSProbeSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProbeSummary.Merge(dst, src)
}
func (m *CLUSProbeSummary) XXX_Size() int {
	return xxx_messageInfo_CLUSProbeSummary.Size(m)
}
func (m *CLUSProbeSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProbeSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProbeSummary proto.InternalMessageInfo

func (m *CLUSProbeSummary) GetContainerMap() uint32 {
	if m != nil {
		return m.ContainerMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidContainerMap() uint32 {
	if m != nil {
		return m.PidContainerMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidProcMap() uint32 {
	if m != nil {
		return m.PidProcMap
	}
	return 0
}

func (m *CLUSProbeSummary) GetNewProcesses() uint32 {
	if m != nil {
		return m.NewProcesses
	}
	return 0
}

func (m *CLUSProbeSummary) GetNewSuspicProc() uint32 {
	if m != nil {
		return m.NewSuspicProc
	}
	return 0
}

func (m *CLUSProbeSummary) GetContainerStops() uint32 {
	if m != nil {
		return m.ContainerStops
	}
	return 0
}

// Deprecated: Do not use.
func (m *CLUSProbeSummary) GetWLStorageWatch() uint32 {
	if m != nil {
		return m.WLStorageWatch
	}
	return 0
}

func (m *CLUSProbeSummary) GetPidSet() uint32 {
	if m != nil {
		return m.PidSet
	}
	return 0
}

func (m *CLUSProbeSummary) GetSessionTable() uint32 {
	if m != nil {
		return m.SessionTable
	}
	return 0
}

func (m *CLUSProbeSummary) GetInotifyWatches() uint32 {
	if m != nil {
		return m.InotifyWatches
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockRoots() uint32 {
	if m != nil {
		return m.ProcBlockRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockMarks() uint32 {
	if m != nil {
		return m.ProcBlockMarks
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockEntryCnt() uint32 {
	if m != nil {
		return m.ProcBlockEntryCnt
	}
	return 0
}

func (m *CLUSProbeSummary) GetProcBlockDirMonCnt() uint32 {
	if m != nil {
		return m.ProcBlockDirMonCnt
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonEvents() uint32 {
	if m != nil {
		return m.FileMonEvents
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonGroups() uint32 {
	if m != nil {
		return m.FileMonGroups
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaRoots() uint32 {
	if m != nil {
		return m.FileMonFaRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaMntRoots() uint32 {
	if m != nil {
		return m.FileMonFaMntRoots
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaDirMarks() uint32 {
	if m != nil {
		return m.FileMonFaDirMarks
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaRules() uint32 {
	if m != nil {
		return m.FileMonFaRules
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaPaths() uint32 {
	if m != nil {
		return m.FileMonFaPaths
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonFaDirs() uint32 {
	if m != nil {
		return m.FileMonFaDirs
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInWds() uint32 {
	if m != nil {
		return m.FileMonInWds
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInPaths() uint32 {
	if m != nil {
		return m.FileMonInPaths
	}
	return 0
}

func (m *CLUSProbeSummary) GetFileMonInDirs() uint32 {
	if m != nil {
		return m.FileMonInDirs
	}
	return 0
}

func (m *CLUSProbeSummary) GetMaxEvalChanQueued() uint32 {
	if m != nil {
		return m.MaxEvalChanQueued
	}
	return 0
}

func (m *CLUSProbeSummary) GetMaxGoroutines() uint32 {
	if m != nil {
		return m.MaxGoroutines
	}
	return 0
}

type CLUSProbeProcess struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Ppid                 int32    `protobuf:"varint,2,opt,name=Ppid,proto3" json:"Ppid,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Ruid                 uint32   `protobuf:"varint,4,opt,name=Ruid,proto3" json:"Ruid,omitempty"`
	Euid                 uint32   `protobuf:"varint,5,opt,name=Euid,proto3" json:"Euid,omitempty"`
	ScanTimes            uint32   `protobuf:"varint,6,opt,name=ScanTimes,proto3" json:"ScanTimes,omitempty"`
	StartTime            uint64   `protobuf:"varint,7,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	Reported             uint32   `protobuf:"varint,8,opt,name=Reported,proto3" json:"Reported,omitempty"`
	Container            string   `protobuf:"bytes,9,opt,name=Container,proto3" json:"Container,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSProbeProcess) Reset()         { *m = CLUSProbeProcess{} }
func (m *CLUSProbeProcess) String() string { return proto.CompactTextString(m) }
func (*CLUSProbeProcess) ProtoMessage()    {}
func (*CLUSProbeProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{11}
}
func (m *CLUSProbeProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProbeProcess.Unmarshal(m, b)
}
func (m *CLUSProbeProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProbeProcess.Marshal(b, m, deterministic)
}
func (dst *CLUSProbeProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProbeProcess.Merge(dst, src)
}
func (m *CLUSProbeProcess) XXX_Size() int {
	return xxx_messageInfo_CLUSProbeProcess.Size(m)
}
func (m *CLUSProbeProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProbeProcess.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProbeProcess proto.InternalMessageInfo

func (m *CLUSProbeProcess) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProbeProcess) GetPpid() int32 {
	if m != nil {
		return m.Ppid
	}
	return 0
}

func (m *CLUSProbeProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProbeProcess) GetRuid() uint32 {
	if m != nil {
		return m.Ruid
	}
	return 0
}

func (m *CLUSProbeProcess) GetEuid() uint32 {
	if m != nil {
		return m.Euid
	}
	return 0
}

func (m *CLUSProbeProcess) GetScanTimes() uint32 {
	if m != nil {
		return m.ScanTimes
	}
	return 0
}

func (m *CLUSProbeProcess) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CLUSProbeProcess) GetReported() uint32 {
	if m != nil {
		return m.Reported
	}
	return 0
}

func (m *CLUSProbeProcess) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

type CLUSProbeProcessArray struct {
	Processes            []*CLUSProbeProcess `protobuf:"bytes,1,rep,name=Processes,proto3" json:"Processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CLUSProbeProcessArray) Reset()         { *m = CLUSProbeProcessArray{} }
func (m *CLUSProbeProcessArray) String() string { return proto.CompactTextString(m) }
func (*CLUSProbeProcessArray) ProtoMessage()    {}
func (*CLUSProbeProcessArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{12}
}
func (m *CLUSProbeProcessArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProbeProcessArray.Unmarshal(m, b)
}
func (m *CLUSProbeProcessArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProbeProcessArray.Marshal(b, m, deterministic)
}
func (dst *CLUSProbeProcessArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProbeProcessArray.Merge(dst, src)
}
func (m *CLUSProbeProcessArray) XXX_Size() int {
	return xxx_messageInfo_CLUSProbeProcessArray.Size(m)
}
func (m *CLUSProbeProcessArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProbeProcessArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProbeProcessArray proto.InternalMessageInfo

func (m *CLUSProbeProcessArray) GetProcesses() []*CLUSProbeProcess {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSProbeContainer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Pid                  int32    `protobuf:"varint,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
	Children             []int32  `protobuf:"varint,3,rep,packed,name=Children,proto3" json:"Children,omitempty"`
	PortsMap             string   `protobuf:"bytes,4,opt,name=PortsMap,proto3" json:"PortsMap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSProbeContainer) Reset()         { *m = CLUSProbeContainer{} }
func (m *CLUSProbeContainer) String() string { return proto.CompactTextString(m) }
func (*CLUSProbeContainer) ProtoMessage()    {}
func (*CLUSProbeContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{13}
}
func (m *CLUSProbeContainer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProbeContainer.Unmarshal(m, b)
}
func (m *CLUSProbeContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProbeContainer.Marshal(b, m, deterministic)
}
func (dst *CLUSProbeContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProbeContainer.Merge(dst, src)
}
func (m *CLUSProbeContainer) XXX_Size() int {
	return xxx_messageInfo_CLUSProbeContainer.Size(m)
}
func (m *CLUSProbeContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProbeContainer.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProbeContainer proto.InternalMessageInfo

func (m *CLUSProbeContainer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CLUSProbeContainer) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProbeContainer) GetChildren() []int32 {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *CLUSProbeContainer) GetPortsMap() string {
	if m != nil {
		return m.PortsMap
	}
	return ""
}

type CLUSProbeContainerArray struct {
	Containers           []*CLUSProbeContainer `protobuf:"bytes,1,rep,name=Containers,proto3" json:"Containers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CLUSProbeContainerArray) Reset()         { *m = CLUSProbeContainerArray{} }
func (m *CLUSProbeContainerArray) String() string { return proto.CompactTextString(m) }
func (*CLUSProbeContainerArray) ProtoMessage()    {}
func (*CLUSProbeContainerArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{14}
}
func (m *CLUSProbeContainerArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProbeContainerArray.Unmarshal(m, b)
}
func (m *CLUSProbeContainerArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProbeContainerArray.Marshal(b, m, deterministic)
}
func (dst *CLUSProbeContainerArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProbeContainerArray.Merge(dst, src)
}
func (m *CLUSProbeContainerArray) XXX_Size() int {
	return xxx_messageInfo_CLUSProbeContainerArray.Size(m)
}
func (m *CLUSProbeContainerArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProbeContainerArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProbeContainerArray proto.InternalMessageInfo

func (m *CLUSProbeContainerArray) GetContainers() []*CLUSProbeContainer {
	if m != nil {
		return m.Containers
	}
	return nil
}

type CLUSFileMonitorFile struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Mask                 uint64   `protobuf:"varint,2,opt,name=Mask,proto3" json:"Mask,omitempty"`
	IsDir                bool     `protobuf:"varint,3,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	Protect              bool     `protobuf:"varint,4,opt,name=Protect,proto3" json:"Protect,omitempty"`
	Files                []string `protobuf:"bytes,5,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSFileMonitorFile) Reset()         { *m = CLUSFileMonitorFile{} }
func (m *CLUSFileMonitorFile) String() string { return proto.CompactTextString(m) }
func (*CLUSFileMonitorFile) ProtoMessage()    {}
func (*CLUSFileMonitorFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{15}
}
func (m *CLUSFileMonitorFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFileMonitorFile.Unmarshal(m, b)
}
func (m *CLUSFileMonitorFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFileMonitorFile.Marshal(b, m, deterministic)
}
func (dst *CLUSFileMonitorFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFileMonitorFile.Merge(dst, src)
}
func (m *CLUSFileMonitorFile) XXX_Size() int {
	return xxx_messageInfo_CLUSFileMonitorFile.Size(m)
}
func (m *CLUSFileMonitorFile) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFileMonitorFile.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFileMonitorFile proto.InternalMessageInfo

func (m *CLUSFileMonitorFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSFileMonitorFile) GetMask() uint64 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *CLUSFileMonitorFile) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

func (m *CLUSFileMonitorFile) GetProtect() bool {
	if m != nil {
		return m.Protect
	}
	return false
}

func (m *CLUSFileMonitorFile) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

type CLUSFileMonitorFileArray struct {
	Files                []*CLUSFileMonitorFile `protobuf:"bytes,1,rep,name=Files,proto3" json:"Files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CLUSFileMonitorFileArray) Reset()         { *m = CLUSFileMonitorFileArray{} }
func (m *CLUSFileMonitorFileArray) String() string { return proto.CompactTextString(m) }
func (*CLUSFileMonitorFileArray) ProtoMessage()    {}
func (*CLUSFileMonitorFileArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{16}
}
func (m *CLUSFileMonitorFileArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSFileMonitorFileArray.Unmarshal(m, b)
}
func (m *CLUSFileMonitorFileArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSFileMonitorFileArray.Marshal(b, m, deterministic)
}
func (dst *CLUSFileMonitorFileArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSFileMonitorFileArray.Merge(dst, src)
}
func (m *CLUSFileMonitorFileArray) XXX_Size() int {
	return xxx_messageInfo_CLUSFileMonitorFileArray.Size(m)
}
func (m *CLUSFileMonitorFileArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSFileMonitorFileArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSFileMonitorFileArray proto.InternalMessageInfo

func (m *CLUSFileMonitorFileArray) GetFiles() []*CLUSFileMonitorFile {
	if m != nil {
		return m.Files
	}
	return nil
}

type CLUSSnifferRequest struct {
	Cmd                  SnifferCmd `protobuf:"varint,1,opt,name=Cmd,proto3,enum=share.SnifferCmd" json:"Cmd,omitempty"`
	ID                   string     `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	WorkloadID           string     `protobuf:"bytes,3,opt,name=WorkloadID,proto3" json:"WorkloadID,omitempty"`
	FileNumber           uint32     `protobuf:"varint,4,opt,name=FileNumber,proto3" json:"FileNumber,omitempty"`
	FileSizeInMB         uint32     `protobuf:"varint,5,opt,name=FileSizeInMB,proto3" json:"FileSizeInMB,omitempty"`
	Filter               string     `protobuf:"bytes,6,opt,name=Filter,proto3" json:"Filter,omitempty"`
	DurationInSecond     uint32     `protobuf:"varint,7,opt,name=DurationInSecond,proto3" json:"DurationInSecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CLUSSnifferRequest) Reset()         { *m = CLUSSnifferRequest{} }
func (m *CLUSSnifferRequest) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferRequest) ProtoMessage()    {}
func (*CLUSSnifferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{17}
}
func (m *CLUSSnifferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferRequest.Unmarshal(m, b)
}
func (m *CLUSSnifferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferRequest.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferRequest.Merge(dst, src)
}
func (m *CLUSSnifferRequest) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferRequest.Size(m)
}
func (m *CLUSSnifferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferRequest proto.InternalMessageInfo

func (m *CLUSSnifferRequest) GetCmd() SnifferCmd {
	if m != nil {
		return m.Cmd
	}
	return SnifferCmd_StartSniffer
}

func (m *CLUSSnifferRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSnifferRequest) GetWorkloadID() string {
	if m != nil {
		return m.WorkloadID
	}
	return ""
}

func (m *CLUSSnifferRequest) GetFileNumber() uint32 {
	if m != nil {
		return m.FileNumber
	}
	return 0
}

func (m *CLUSSnifferRequest) GetFileSizeInMB() uint32 {
	if m != nil {
		return m.FileSizeInMB
	}
	return 0
}

func (m *CLUSSnifferRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSSnifferRequest) GetDurationInSecond() uint32 {
	if m != nil {
		return m.DurationInSecond
	}
	return 0
}

type CLUSSnifferResponse struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSnifferResponse) Reset()         { *m = CLUSSnifferResponse{} }
func (m *CLUSSnifferResponse) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferResponse) ProtoMessage()    {}
func (*CLUSSnifferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{18}
}
func (m *CLUSSnifferResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferResponse.Unmarshal(m, b)
}
func (m *CLUSSnifferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferResponse.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferResponse.Merge(dst, src)
}
func (m *CLUSSnifferResponse) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferResponse.Size(m)
}
func (m *CLUSSnifferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferResponse proto.InternalMessageInfo

func (m *CLUSSnifferResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSSnifferFilter struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Workload             string   `protobuf:"bytes,2,opt,name=Workload,proto3" json:"Workload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSnifferFilter) Reset()         { *m = CLUSSnifferFilter{} }
func (m *CLUSSnifferFilter) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferFilter) ProtoMessage()    {}
func (*CLUSSnifferFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{19}
}
func (m *CLUSSnifferFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferFilter.Unmarshal(m, b)
}
func (m *CLUSSnifferFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferFilter.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferFilter.Merge(dst, src)
}
func (m *CLUSSnifferFilter) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferFilter.Size(m)
}
func (m *CLUSSnifferFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferFilter proto.InternalMessageInfo

func (m *CLUSSnifferFilter) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSnifferFilter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

type CLUSSniffer struct {
	ID                   string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AgentID              string        `protobuf:"bytes,2,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	WorkloadID           string        `protobuf:"bytes,3,opt,name=WorkloadID,proto3" json:"WorkloadID,omitempty"`
	Status               SnifferStatus `protobuf:"varint,4,opt,name=Status,proto3,enum=share.SnifferStatus" json:"Status,omitempty"`
	Args                 string        `protobuf:"bytes,5,opt,name=Args,proto3" json:"Args,omitempty"`
	FileNumber           uint32        `protobuf:"varint,6,opt,name=FileNumber,proto3" json:"FileNumber,omitempty"`
	Size                 int64         `protobuf:"varint,7,opt,name=Size,proto3" json:"Size,omitempty"`
	StartTime            int64         `protobuf:"varint,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	StopTime             int64         `protobuf:"varint,9,opt,name=StopTime,proto3" json:"StopTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CLUSSniffer) Reset()         { *m = CLUSSniffer{} }
func (m *CLUSSniffer) String() string { return proto.CompactTextString(m) }
func (*CLUSSniffer) ProtoMessage()    {}
func (*CLUSSniffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{20}
}
func (m *CLUSSniffer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSniffer.Unmarshal(m, b)
}
func (m *CLUSSniffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSniffer.Marshal(b, m, deterministic)
}
func (dst *CLUSSniffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSniffer.Merge(dst, src)
}
func (m *CLUSSniffer) XXX_Size() int {
	return xxx_messageInfo_CLUSSniffer.Size(m)
}
func (m *CLUSSniffer) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSniffer.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSniffer proto.InternalMessageInfo

func (m *CLUSSniffer) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSSniffer) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *CLUSSniffer) GetWorkloadID() string {
	if m != nil {
		return m.WorkloadID
	}
	return ""
}

func (m *CLUSSniffer) GetStatus() SnifferStatus {
	if m != nil {
		return m.Status
	}
	return SnifferStatus_Failed
}

func (m *CLUSSniffer) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *CLUSSniffer) GetFileNumber() uint32 {
	if m != nil {
		return m.FileNumber
	}
	return 0
}

func (m *CLUSSniffer) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *CLUSSniffer) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *CLUSSniffer) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

type CLUSSnifferArray struct {
	Sniffers             []*CLUSSniffer `protobuf:"bytes,1,rep,name=sniffers,proto3" json:"sniffers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CLUSSnifferArray) Reset()         { *m = CLUSSnifferArray{} }
func (m *CLUSSnifferArray) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferArray) ProtoMessage()    {}
func (*CLUSSnifferArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{21}
}
func (m *CLUSSnifferArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferArray.Unmarshal(m, b)
}
func (m *CLUSSnifferArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferArray.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferArray.Merge(dst, src)
}
func (m *CLUSSnifferArray) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferArray.Size(m)
}
func (m *CLUSSnifferArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferArray proto.InternalMessageInfo

func (m *CLUSSnifferArray) GetSniffers() []*CLUSSniffer {
	if m != nil {
		return m.Sniffers
	}
	return nil
}

type CLUSSnifferDownload struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSnifferDownload) Reset()         { *m = CLUSSnifferDownload{} }
func (m *CLUSSnifferDownload) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferDownload) ProtoMessage()    {}
func (*CLUSSnifferDownload) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{22}
}
func (m *CLUSSnifferDownload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferDownload.Unmarshal(m, b)
}
func (m *CLUSSnifferDownload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferDownload.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferDownload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferDownload.Merge(dst, src)
}
func (m *CLUSSnifferDownload) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferDownload.Size(m)
}
func (m *CLUSSnifferDownload) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferDownload.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferDownload proto.InternalMessageInfo

func (m *CLUSSnifferDownload) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type CLUSSnifferPcap struct {
	Pcap                 []byte   `protobuf:"bytes,1,opt,name=Pcap,proto3" json:"Pcap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSSnifferPcap) Reset()         { *m = CLUSSnifferPcap{} }
func (m *CLUSSnifferPcap) String() string { return proto.CompactTextString(m) }
func (*CLUSSnifferPcap) ProtoMessage()    {}
func (*CLUSSnifferPcap) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{23}
}
func (m *CLUSSnifferPcap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSSnifferPcap.Unmarshal(m, b)
}
func (m *CLUSSnifferPcap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSSnifferPcap.Marshal(b, m, deterministic)
}
func (dst *CLUSSnifferPcap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSSnifferPcap.Merge(dst, src)
}
func (m *CLUSSnifferPcap) XXX_Size() int {
	return xxx_messageInfo_CLUSSnifferPcap.Size(m)
}
func (m *CLUSSnifferPcap) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSSnifferPcap.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSSnifferPcap proto.InternalMessageInfo

func (m *CLUSSnifferPcap) GetPcap() []byte {
	if m != nil {
		return m.Pcap
	}
	return nil
}

type CLUSContainerLogReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Start                int32    `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	Limit                uint32   `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSContainerLogReq) Reset()         { *m = CLUSContainerLogReq{} }
func (m *CLUSContainerLogReq) String() string { return proto.CompactTextString(m) }
func (*CLUSContainerLogReq) ProtoMessage()    {}
func (*CLUSContainerLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{24}
}
func (m *CLUSContainerLogReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSContainerLogReq.Unmarshal(m, b)
}
func (m *CLUSContainerLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSContainerLogReq.Marshal(b, m, deterministic)
}
func (dst *CLUSContainerLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSContainerLogReq.Merge(dst, src)
}
func (m *CLUSContainerLogReq) XXX_Size() int {
	return xxx_messageInfo_CLUSContainerLogReq.Size(m)
}
func (m *CLUSContainerLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSContainerLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSContainerLogReq proto.InternalMessageInfo

func (m *CLUSContainerLogReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CLUSContainerLogReq) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *CLUSContainerLogReq) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CLUSContainerLogRes struct {
	LogZb                []byte   `protobuf:"bytes,1,opt,name=LogZb,proto3" json:"LogZb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSContainerLogRes) Reset()         { *m = CLUSContainerLogRes{} }
func (m *CLUSContainerLogRes) String() string { return proto.CompactTextString(m) }
func (*CLUSContainerLogRes) ProtoMessage()    {}
func (*CLUSContainerLogRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{25}
}
func (m *CLUSContainerLogRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSContainerLogRes.Unmarshal(m, b)
}
func (m *CLUSContainerLogRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSContainerLogRes.Marshal(b, m, deterministic)
}
func (dst *CLUSContainerLogRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSContainerLogRes.Merge(dst, src)
}
func (m *CLUSContainerLogRes) XXX_Size() int {
	return xxx_messageInfo_CLUSContainerLogRes.Size(m)
}
func (m *CLUSContainerLogRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSContainerLogRes.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSContainerLogRes proto.InternalMessageInfo

func (m *CLUSContainerLogRes) GetLogZb() []byte {
	if m != nil {
		return m.LogZb
	}
	return nil
}

type CLUSProcess struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Pid                  uint32   `protobuf:"varint,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
	PPid                 uint32   `protobuf:"varint,3,opt,name=PPid,proto3" json:"PPid,omitempty"`
	PGid                 uint32   `protobuf:"varint,4,opt,name=PGid,proto3" json:"PGid,omitempty"`
	PSid                 uint32   `protobuf:"varint,5,opt,name=PSid,proto3" json:"PSid,omitempty"`
	RUid                 uint32   `protobuf:"varint,6,opt,name=RUid,proto3" json:"RUid,omitempty"`
	EUid                 uint32   `protobuf:"varint,7,opt,name=EUid,proto3" json:"EUid,omitempty"`
	Cmds                 []string `protobuf:"bytes,8,rep,name=Cmds,proto3" json:"Cmds,omitempty"`
	Root                 bool     `protobuf:"varint,9,opt,name=Root,proto3" json:"Root,omitempty"`
	User                 string   `protobuf:"bytes,10,opt,name=User,proto3" json:"User,omitempty"`
	Status               string   `protobuf:"bytes,11,opt,name=Status,proto3" json:"Status,omitempty"`
	StartAt              int64    `protobuf:"varint,12,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	Action               string   `protobuf:"bytes,13,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSProcess) Reset()         { *m = CLUSProcess{} }
func (m *CLUSProcess) String() string { return proto.CompactTextString(m) }
func (*CLUSProcess) ProtoMessage()    {}
func (*CLUSProcess) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{26}
}
func (m *CLUSProcess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProcess.Unmarshal(m, b)
}
func (m *CLUSProcess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProcess.Marshal(b, m, deterministic)
}
func (dst *CLUSProcess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProcess.Merge(dst, src)
}
func (m *CLUSProcess) XXX_Size() int {
	return xxx_messageInfo_CLUSProcess.Size(m)
}
func (m *CLUSProcess) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProcess.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProcess proto.InternalMessageInfo

func (m *CLUSProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSProcess) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CLUSProcess) GetPPid() uint32 {
	if m != nil {
		return m.PPid
	}
	return 0
}

func (m *CLUSProcess) GetPGid() uint32 {
	if m != nil {
		return m.PGid
	}
	return 0
}

func (m *CLUSProcess) GetPSid() uint32 {
	if m != nil {
		return m.PSid
	}
	return 0
}

func (m *CLUSProcess) GetRUid() uint32 {
	if m != nil {
		return m.RUid
	}
	return 0
}

func (m *CLUSProcess) GetEUid() uint32 {
	if m != nil {
		return m.EUid
	}
	return 0
}

func (m *CLUSProcess) GetCmds() []string {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *CLUSProcess) GetRoot() bool {
	if m != nil {
		return m.Root
	}
	return false
}

func (m *CLUSProcess) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *CLUSProcess) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CLUSProcess) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *CLUSProcess) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

type CLUSProcessArray struct {
	Processes            []*CLUSProcess `protobuf:"bytes,1,rep,name=Processes,proto3" json:"Processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CLUSProcessArray) Reset()         { *m = CLUSProcessArray{} }
func (m *CLUSProcessArray) String() string { return proto.CompactTextString(m) }
func (*CLUSProcessArray) ProtoMessage()    {}
func (*CLUSProcessArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{27}
}
func (m *CLUSProcessArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSProcessArray.Unmarshal(m, b)
}
func (m *CLUSProcessArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSProcessArray.Marshal(b, m, deterministic)
}
func (dst *CLUSProcessArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSProcessArray.Merge(dst, src)
}
func (m *CLUSProcessArray) XXX_Size() int {
	return xxx_messageInfo_CLUSProcessArray.Size(m)
}
func (m *CLUSProcessArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSProcessArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSProcessArray proto.InternalMessageInfo

func (m *CLUSProcessArray) GetProcesses() []*CLUSProcess {
	if m != nil {
		return m.Processes
	}
	return nil
}

type CLUSDerivedDlpRule struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Action               uint32   `protobuf:"varint,2,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedDlpRule) Reset()         { *m = CLUSDerivedDlpRule{} }
func (m *CLUSDerivedDlpRule) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRule) ProtoMessage()    {}
func (*CLUSDerivedDlpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{28}
}
func (m *CLUSDerivedDlpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRule.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRule.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRule.Merge(dst, src)
}
func (m *CLUSDerivedDlpRule) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRule.Size(m)
}
func (m *CLUSDerivedDlpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRule.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRule proto.InternalMessageInfo

func (m *CLUSDerivedDlpRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedDlpRule) GetAction() uint32 {
	if m != nil {
		return m.Action
	}
	return 0
}

type CLUSDerivedDlpRuleArray struct {
	Mode                 string                `protobuf:"bytes,1,opt,name=Mode,proto3" json:"Mode,omitempty"`
	DefAct               uint32                `protobuf:"varint,2,opt,name=DefAct,proto3" json:"DefAct,omitempty"`
	ApplyDir             int32                 `protobuf:"varint,3,opt,name=ApplyDir,proto3" json:"ApplyDir,omitempty"`
	WlMacs               []string              `protobuf:"bytes,4,rep,name=WlMacs,proto3" json:"WlMacs,omitempty"`
	DlpRules             []*CLUSDerivedDlpRule `protobuf:"bytes,5,rep,name=DlpRules,proto3" json:"DlpRules,omitempty"`
	WafRules             []*CLUSDerivedDlpRule `protobuf:"bytes,6,rep,name=WafRules,proto3" json:"WafRules,omitempty"`
	Rids                 []uint32              `protobuf:"varint,7,rep,packed,name=rids,proto3" json:"rids,omitempty"`
	Wafrids              []uint32              `protobuf:"varint,8,rep,packed,name=wafrids,proto3" json:"wafrids,omitempty"`
	RuleType             string                `protobuf:"bytes,9,opt,name=RuleType,proto3" json:"RuleType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CLUSDerivedDlpRuleArray) Reset()         { *m = CLUSDerivedDlpRuleArray{} }
func (m *CLUSDerivedDlpRuleArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleArray) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{29}
}
func (m *CLUSDerivedDlpRuleArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleArray.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleArray.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleArray.Size(m)
}
func (m *CLUSDerivedDlpRuleArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleArray proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleArray) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *CLUSDerivedDlpRuleArray) GetDefAct() uint32 {
	if m != nil {
		return m.DefAct
	}
	return 0
}

func (m *CLUSDerivedDlpRuleArray) GetApplyDir() int32 {
	if m != nil {
		return m.ApplyDir
	}
	return 0
}

func (m *CLUSDerivedDlpRuleArray) GetWlMacs() []string {
	if m != nil {
		return m.WlMacs
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetDlpRules() []*CLUSDerivedDlpRule {
	if m != nil {
		return m.DlpRules
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetWafRules() []*CLUSDerivedDlpRule {
	if m != nil {
		return m.WafRules
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetRids() []uint32 {
	if m != nil {
		return m.Rids
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetWafrids() []uint32 {
	if m != nil {
		return m.Wafrids
	}
	return nil
}

func (m *CLUSDerivedDlpRuleArray) GetRuleType() string {
	if m != nil {
		return m.RuleType
	}
	return ""
}

type CLUSDerivedDlpRuleMap struct {
	DlpRuleMap           map[string]*CLUSDerivedDlpRuleArray `protobuf:"bytes,1,rep,name=DlpRuleMap,proto3" json:"DlpRuleMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CLUSDerivedDlpRuleMap) Reset()         { *m = CLUSDerivedDlpRuleMap{} }
func (m *CLUSDerivedDlpRuleMap) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMap) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{30}
}
func (m *CLUSDerivedDlpRuleMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleMap.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleMap.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleMap.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleMap) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleMap.Size(m)
}
func (m *CLUSDerivedDlpRuleMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleMap.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleMap proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleMap) GetDlpRuleMap() map[string]*CLUSDerivedDlpRuleArray {
	if m != nil {
		return m.DlpRuleMap
	}
	return nil
}

type CLUSDerivedDlpRuleEntry struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                   uint32   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Patterns             []string `protobuf:"bytes,3,rep,name=Patterns,proto3" json:"Patterns,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedDlpRuleEntry) Reset()         { *m = CLUSDerivedDlpRuleEntry{} }
func (m *CLUSDerivedDlpRuleEntry) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleEntry) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{31}
}
func (m *CLUSDerivedDlpRuleEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntry.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntry.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleEntry.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleEntry) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntry.Size(m)
}
func (m *CLUSDerivedDlpRuleEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleEntry proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedDlpRuleEntry) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *CLUSDerivedDlpRuleEntry) GetPatterns() []string {
	if m != nil {
		return m.Patterns
	}
	return nil
}

type CLUSDerivedDlpRuleEntryArray struct {
	DlpRuleEntries       []*CLUSDerivedDlpRuleEntry `protobuf:"bytes,1,rep,name=DlpRuleEntries,proto3" json:"DlpRuleEntries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CLUSDerivedDlpRuleEntryArray) Reset()         { *m = CLUSDerivedDlpRuleEntryArray{} }
func (m *CLUSDerivedDlpRuleEntryArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleEntryArray) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleEntryArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{32}
}
func (m *CLUSDerivedDlpRuleEntryArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntryArray.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleEntryArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntryArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleEntryArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleEntryArray.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleEntryArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleEntryArray.Size(m)
}
func (m *CLUSDerivedDlpRuleEntryArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleEntryArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleEntryArray proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleEntryArray) GetDlpRuleEntries() []*CLUSDerivedDlpRuleEntry {
	if m != nil {
		return m.DlpRuleEntries
	}
	return nil
}

type CLUSDerivedDlpRuleMac struct {
	Mac                  string   `protobuf:"bytes,1,opt,name=Mac,proto3" json:"Mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedDlpRuleMac) Reset()         { *m = CLUSDerivedDlpRuleMac{} }
func (m *CLUSDerivedDlpRuleMac) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMac) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleMac) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{33}
}
func (m *CLUSDerivedDlpRuleMac) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleMac.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleMac) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleMac.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleMac) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleMac.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleMac) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleMac.Size(m)
}
func (m *CLUSDerivedDlpRuleMac) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleMac.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleMac proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleMac) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type CLUSDerivedDlpRuleMacArray struct {
	DlpRuleMacs          []*CLUSDerivedDlpRuleMac `protobuf:"bytes,1,rep,name=DlpRuleMacs,proto3" json:"DlpRuleMacs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CLUSDerivedDlpRuleMacArray) Reset()         { *m = CLUSDerivedDlpRuleMacArray{} }
func (m *CLUSDerivedDlpRuleMacArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedDlpRuleMacArray) ProtoMessage()    {}
func (*CLUSDerivedDlpRuleMacArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{34}
}
func (m *CLUSDerivedDlpRuleMacArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedDlpRuleMacArray.Unmarshal(m, b)
}
func (m *CLUSDerivedDlpRuleMacArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedDlpRuleMacArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedDlpRuleMacArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedDlpRuleMacArray.Merge(dst, src)
}
func (m *CLUSDerivedDlpRuleMacArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedDlpRuleMacArray.Size(m)
}
func (m *CLUSDerivedDlpRuleMacArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedDlpRuleMacArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedDlpRuleMacArray proto.InternalMessageInfo

func (m *CLUSDerivedDlpRuleMacArray) GetDlpRuleMacs() []*CLUSDerivedDlpRuleMac {
	if m != nil {
		return m.DlpRuleMacs
	}
	return nil
}

type CLUSDerivedProcessRule struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
	CreatedAt            uint64   `protobuf:"varint,4,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdateAt             uint64   `protobuf:"varint,5,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
	GroupName            string   `protobuf:"bytes,6,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	CfgType              string   `protobuf:"bytes,7,opt,name=CfgType,proto3" json:"CfgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedProcessRule) Reset()         { *m = CLUSDerivedProcessRule{} }
func (m *CLUSDerivedProcessRule) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedProcessRule) ProtoMessage()    {}
func (*CLUSDerivedProcessRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{35}
}
func (m *CLUSDerivedProcessRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedProcessRule.Unmarshal(m, b)
}
func (m *CLUSDerivedProcessRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedProcessRule.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedProcessRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedProcessRule.Merge(dst, src)
}
func (m *CLUSDerivedProcessRule) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedProcessRule.Size(m)
}
func (m *CLUSDerivedProcessRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedProcessRule.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedProcessRule proto.InternalMessageInfo

func (m *CLUSDerivedProcessRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CLUSDerivedProcessRule) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

func (m *CLUSDerivedProcessRule) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSDerivedProcessRule) GetCfgType() string {
	if m != nil {
		return m.CfgType
	}
	return ""
}

type CLUSDerivedProcessRuleArray struct {
	Rules                []*CLUSDerivedProcessRule `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CLUSDerivedProcessRuleArray) Reset()         { *m = CLUSDerivedProcessRuleArray{} }
func (m *CLUSDerivedProcessRuleArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedProcessRuleArray) ProtoMessage()    {}
func (*CLUSDerivedProcessRuleArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{36}
}
func (m *CLUSDerivedProcessRuleArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedProcessRuleArray.Unmarshal(m, b)
}
func (m *CLUSDerivedProcessRuleArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedProcessRuleArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedProcessRuleArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedProcessRuleArray.Merge(dst, src)
}
func (m *CLUSDerivedProcessRuleArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedProcessRuleArray.Size(m)
}
func (m *CLUSDerivedProcessRuleArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedProcessRuleArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedProcessRuleArray proto.InternalMessageInfo

func (m *CLUSDerivedProcessRuleArray) GetRules() []*CLUSDerivedProcessRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSDerivedFileRule struct {
	Recursive            bool     `protobuf:"varint,1,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
	Filter               string   `protobuf:"bytes,2,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=Path,proto3" json:"Path,omitempty"`
	Regex                string   `protobuf:"bytes,4,opt,name=Regex,proto3" json:"Regex,omitempty"`
	Behavior             string   `protobuf:"bytes,5,opt,name=Behavior,proto3" json:"Behavior,omitempty"`
	GroupName            string   `protobuf:"bytes,6,opt,name=GroupName,proto3" json:"GroupName,omitempty"`
	Apps                 []string `protobuf:"bytes,7,rep,name=Apps,proto3" json:"Apps,omitempty"`
	CfgType              string   `protobuf:"bytes,8,opt,name=CfgType,proto3" json:"CfgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSDerivedFileRule) Reset()         { *m = CLUSDerivedFileRule{} }
func (m *CLUSDerivedFileRule) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedFileRule) ProtoMessage()    {}
func (*CLUSDerivedFileRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{37}
}
func (m *CLUSDerivedFileRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedFileRule.Unmarshal(m, b)
}
func (m *CLUSDerivedFileRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedFileRule.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedFileRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedFileRule.Merge(dst, src)
}
func (m *CLUSDerivedFileRule) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedFileRule.Size(m)
}
func (m *CLUSDerivedFileRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedFileRule.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedFileRule proto.InternalMessageInfo

func (m *CLUSDerivedFileRule) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *CLUSDerivedFileRule) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetBehavior() string {
	if m != nil {
		return m.Behavior
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CLUSDerivedFileRule) GetApps() []string {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *CLUSDerivedFileRule) GetCfgType() string {
	if m != nil {
		return m.CfgType
	}
	return ""
}

type CLUSDerivedFileRuleArray struct {
	Rules                []*CLUSDerivedFileRule `protobuf:"bytes,1,rep,name=Rules,proto3" json:"Rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CLUSDerivedFileRuleArray) Reset()         { *m = CLUSDerivedFileRuleArray{} }
func (m *CLUSDerivedFileRuleArray) String() string { return proto.CompactTextString(m) }
func (*CLUSDerivedFileRuleArray) ProtoMessage()    {}
func (*CLUSDerivedFileRuleArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{38}
}
func (m *CLUSDerivedFileRuleArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSDerivedFileRuleArray.Unmarshal(m, b)
}
func (m *CLUSDerivedFileRuleArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSDerivedFileRuleArray.Marshal(b, m, deterministic)
}
func (dst *CLUSDerivedFileRuleArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSDerivedFileRuleArray.Merge(dst, src)
}
func (m *CLUSDerivedFileRuleArray) XXX_Size() int {
	return xxx_messageInfo_CLUSDerivedFileRuleArray.Size(m)
}
func (m *CLUSDerivedFileRuleArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSDerivedFileRuleArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSDerivedFileRuleArray proto.InternalMessageInfo

func (m *CLUSDerivedFileRuleArray) GetRules() []*CLUSDerivedFileRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type CLUSWorkloadInterceptPort struct {
	Port                 string   `protobuf:"bytes,1,opt,name=Port,proto3" json:"Port,omitempty"`
	Peer                 string   `protobuf:"bytes,2,opt,name=Peer,proto3" json:"Peer,omitempty"`
	MAC                  []byte   `protobuf:"bytes,3,opt,name=MAC,proto3" json:"MAC,omitempty"`
	UCMAC                []byte   `protobuf:"bytes,4,opt,name=UCMAC,proto3" json:"UCMAC,omitempty"`
	BCMAC                []byte   `protobuf:"bytes,5,opt,name=BCMAC,proto3" json:"BCMAC,omitempty"`
	InPort               string   `protobuf:"bytes,6,opt,name=InPort,proto3" json:"InPort,omitempty"`
	ExPort               string   `protobuf:"bytes,7,opt,name=ExPort,proto3" json:"ExPort,omitempty"`
	InPortRules          string   `protobuf:"bytes,8,opt,name=InPortRules,proto3" json:"InPortRules,omitempty"`
	ExPortRules          string   `protobuf:"bytes,9,opt,name=ExPortRules,proto3" json:"ExPortRules,omitempty"`
	EnforcerRules        string   `protobuf:"bytes,10,opt,name=EnforcerRules,proto3" json:"EnforcerRules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSWorkloadInterceptPort) Reset()         { *m = CLUSWorkloadInterceptPort{} }
func (m *CLUSWorkloadInterceptPort) String() string { return proto.CompactTextString(m) }
func (*CLUSWorkloadInterceptPort) ProtoMessage()    {}
func (*CLUSWorkloadInterceptPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{39}
}
func (m *CLUSWorkloadInterceptPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSWorkloadInterceptPort.Unmarshal(m, b)
}
func (m *CLUSWorkloadInterceptPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSWorkloadInterceptPort.Marshal(b, m, deterministic)
}
func (dst *CLUSWorkloadInterceptPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSWorkloadInterceptPort.Merge(dst, src)
}
func (m *CLUSWorkloadInterceptPort) XXX_Size() int {
	return xxx_messageInfo_CLUSWorkloadInterceptPort.Size(m)
}
func (m *CLUSWorkloadInterceptPort) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSWorkloadInterceptPort.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSWorkloadInterceptPort proto.InternalMessageInfo

func (m *CLUSWorkloadInterceptPort) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetMAC() []byte {
	if m != nil {
		return m.MAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetUCMAC() []byte {
	if m != nil {
		return m.UCMAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetBCMAC() []byte {
	if m != nil {
		return m.BCMAC
	}
	return nil
}

func (m *CLUSWorkloadInterceptPort) GetInPort() string {
	if m != nil {
		return m.InPort
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetExPort() string {
	if m != nil {
		return m.ExPort
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetInPortRules() string {
	if m != nil {
		return m.InPortRules
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetExPortRules() string {
	if m != nil {
		return m.ExPortRules
	}
	return ""
}

func (m *CLUSWorkloadInterceptPort) GetEnforcerRules() string {
	if m != nil {
		return m.EnforcerRules
	}
	return ""
}

type CLUSWorkloadIntercept struct {
	ID                   string                       `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Inline               bool                         `protobuf:"varint,2,opt,name=Inline,proto3" json:"Inline,omitempty"`
	Quarantine           bool                         `protobuf:"varint,3,opt,name=Quarantine,proto3" json:"Quarantine,omitempty"`
	Ports                []*CLUSWorkloadInterceptPort `protobuf:"bytes,4,rep,name=Ports,proto3" json:"Ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CLUSWorkloadIntercept) Reset()         { *m = CLUSWorkloadIntercept{} }
func (m *CLUSWorkloadIntercept) String() string { return proto.CompactTextString(m) }
func (*CLUSWorkloadIntercept) ProtoMessage()    {}
func (*CLUSWorkloadIntercept) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{40}
}
func (m *CLUSWorkloadIntercept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSWorkloadIntercept.Unmarshal(m, b)
}
func (m *CLUSWorkloadIntercept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSWorkloadIntercept.Marshal(b, m, deterministic)
}
func (dst *CLUSWorkloadIntercept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSWorkloadIntercept.Merge(dst, src)
}
func (m *CLUSWorkloadIntercept) XXX_Size() int {
	return xxx_messageInfo_CLUSWorkloadIntercept.Size(m)
}
func (m *CLUSWorkloadIntercept) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSWorkloadIntercept.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSWorkloadIntercept proto.InternalMessageInfo

func (m *CLUSWorkloadIntercept) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *CLUSWorkloadIntercept) GetInline() bool {
	if m != nil {
		return m.Inline
	}
	return false
}

func (m *CLUSWorkloadIntercept) GetQuarantine() bool {
	if m != nil {
		return m.Quarantine
	}
	return false
}

func (m *CLUSWorkloadIntercept) GetPorts() []*CLUSWorkloadInterceptPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

type CLUSMeter struct {
	MeterID              uint32   `protobuf:"varint,1,opt,name=MeterID,proto3" json:"MeterID,omitempty"`
	Workload             string   `protobuf:"bytes,2,opt,name=Workload,proto3" json:"Workload,omitempty"`
	PeerIP               []byte   `protobuf:"bytes,3,opt,name=PeerIP,proto3" json:"PeerIP,omitempty"`
	Count                uint32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	LastCount            uint32   `protobuf:"varint,5,opt,name=LastCount,proto3" json:"LastCount,omitempty"`
	Idle                 uint32   `protobuf:"varint,6,opt,name=Idle,proto3" json:"Idle,omitempty"`
	Span                 uint32   `protobuf:"varint,7,opt,name=Span,proto3" json:"Span,omitempty"`
	UpperLimit           uint32   `protobuf:"varint,8,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	LowerLimit           uint32   `protobuf:"varint,9,opt,name=LowerLimit,proto3" json:"LowerLimit,omitempty"`
	Tap                  bool     `protobuf:"varint,10,opt,name=Tap,proto3" json:"Tap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSMeter) Reset()         { *m = CLUSMeter{} }
func (m *CLUSMeter) String() string { return proto.CompactTextString(m) }
func (*CLUSMeter) ProtoMessage()    {}
func (*CLUSMeter) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{41}
}
func (m *CLUSMeter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSMeter.Unmarshal(m, b)
}
func (m *CLUSMeter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSMeter.Marshal(b, m, deterministic)
}
func (dst *CLUSMeter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSMeter.Merge(dst, src)
}
func (m *CLUSMeter) XXX_Size() int {
	return xxx_messageInfo_CLUSMeter.Size(m)
}
func (m *CLUSMeter) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSMeter.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSMeter proto.InternalMessageInfo

func (m *CLUSMeter) GetMeterID() uint32 {
	if m != nil {
		return m.MeterID
	}
	return 0
}

func (m *CLUSMeter) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CLUSMeter) GetPeerIP() []byte {
	if m != nil {
		return m.PeerIP
	}
	return nil
}

func (m *CLUSMeter) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CLUSMeter) GetLastCount() uint32 {
	if m != nil {
		return m.LastCount
	}
	return 0
}

func (m *CLUSMeter) GetIdle() uint32 {
	if m != nil {
		return m.Idle
	}
	return 0
}

func (m *CLUSMeter) GetSpan() uint32 {
	if m != nil {
		return m.Span
	}
	return 0
}

func (m *CLUSMeter) GetUpperLimit() uint32 {
	if m != nil {
		return m.UpperLimit
	}
	return 0
}

func (m *CLUSMeter) GetLowerLimit() uint32 {
	if m != nil {
		return m.LowerLimit
	}
	return 0
}

func (m *CLUSMeter) GetTap() bool {
	if m != nil {
		return m.Tap
	}
	return false
}

type CLUSMeterArray struct {
	Meters               []*CLUSMeter `protobuf:"bytes,1,rep,name=Meters,proto3" json:"Meters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CLUSMeterArray) Reset()         { *m = CLUSMeterArray{} }
func (m *CLUSMeterArray) String() string { return proto.CompactTextString(m) }
func (*CLUSMeterArray) ProtoMessage()    {}
func (*CLUSMeterArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{42}
}
func (m *CLUSMeterArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSMeterArray.Unmarshal(m, b)
}
func (m *CLUSMeterArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSMeterArray.Marshal(b, m, deterministic)
}
func (dst *CLUSMeterArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSMeterArray.Merge(dst, src)
}
func (m *CLUSMeterArray) XXX_Size() int {
	return xxx_messageInfo_CLUSMeterArray.Size(m)
}
func (m *CLUSMeterArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSMeterArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSMeterArray proto.InternalMessageInfo

func (m *CLUSMeterArray) GetMeters() []*CLUSMeter {
	if m != nil {
		return m.Meters
	}
	return nil
}

type CLUSWlIDArray struct {
	WlID                 []string `protobuf:"bytes,1,rep,name=WlID,proto3" json:"WlID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CLUSWlIDArray) Reset()         { *m = CLUSWlIDArray{} }
func (m *CLUSWlIDArray) String() string { return proto.CompactTextString(m) }
func (*CLUSWlIDArray) ProtoMessage()    {}
func (*CLUSWlIDArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_enforcer_service_d7f6058b9d2feaed, []int{43}
}
func (m *CLUSWlIDArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLUSWlIDArray.Unmarshal(m, b)
}
func (m *CLUSWlIDArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLUSWlIDArray.Marshal(b, m, deterministic)
}
func (dst *CLUSWlIDArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLUSWlIDArray.Merge(dst, src)
}
func (m *CLUSWlIDArray) XXX_Size() int {
	return xxx_messageInfo_CLUSWlIDArray.Size(m)
}
func (m *CLUSWlIDArray) XXX_DiscardUnknown() {
	xxx_messageInfo_CLUSWlIDArray.DiscardUnknown(m)
}

var xxx_messageInfo_CLUSWlIDArray proto.InternalMessageInfo

func (m *CLUSWlIDArray) GetWlID() []string {
	if m != nil {
		return m.WlID
	}
	return nil
}

func init() {
	proto.RegisterType((*CLUSKick)(nil), "share.CLUSKick")
	proto.RegisterType((*CLUSFilter)(nil), "share.CLUSFilter")
	proto.RegisterType((*CLUSSession)(nil), "share.CLUSSession")
	proto.RegisterType((*CLUSSessionArray)(nil), "share.CLUSSessionArray")
	proto.RegisterType((*CLUSSessionCounter)(nil), "share.CLUSSessionCounter")
	proto.RegisterType((*CLUSDatapathCounter)(nil), "share.CLUSDatapathCounter")
	proto.RegisterType((*CLUSDerivedPolicyApp)(nil), "share.CLUSDerivedPolicyApp")
	proto.RegisterType((*CLUSDerivedPolicyRule)(nil), "share.CLUSDerivedPolicyRule")
	proto.RegisterType((*CLUSDerivedPolicyRuleArray)(nil), "share.CLUSDerivedPolicyRuleArray")
	proto.RegisterType((*CLUSDerivedPolicyRuleMap)(nil), "share.CLUSDerivedPolicyRuleMap")
	proto.RegisterMapType((map[string]*CLUSDerivedPolicyRuleArray)(nil), "share.CLUSDerivedPolicyRuleMap.RuleMapEntry")
	proto.RegisterType((*CLUSProbeSummary)(nil), "share.CLUSProbeSummary")
	proto.RegisterType((*CLUSProbeProcess)(nil), "share.CLUSProbeProcess")
	proto.RegisterType((*CLUSProbeProcessArray)(nil), "share.CLUSProbeProcessArray")
	proto.RegisterType((*CLUSProbeContainer)(nil), "share.CLUSProbeContainer")
	proto.RegisterType((*CLUSProbeContainerArray)(nil), "share.CLUSProbeContainerArray")
	proto.RegisterType((*CLUSFileMonitorFile)(nil), "share.CLUSFileMonitorFile")
	proto.RegisterType((*CLUSFileMonitorFileArray)(nil), "share.CLUSFileMonitorFileArray")
	proto.RegisterType((*CLUSSnifferRequest)(nil), "share.CLUSSnifferRequest")
	proto.RegisterType((*CLUSSnifferResponse)(nil), "share.CLUSSnifferResponse")
	proto.RegisterType((*CLUSSnifferFilter)(nil), "share.CLUSSnifferFilter")
	proto.RegisterType((*CLUSSniffer)(nil), "share.CLUSSniffer")
	proto.RegisterType((*CLUSSnifferArray)(nil), "share.CLUSSnifferArray")
	proto.RegisterType((*CLUSSnifferDownload)(nil), "share.CLUSSnifferDownload")
	proto.RegisterType((*CLUSSnifferPcap)(nil), "share.CLUSSnifferPcap")
	proto.RegisterType((*CLUSContainerLogReq)(nil), "share.CLUSContainerLogReq")
	proto.RegisterType((*CLUSContainerLogRes)(nil), "share.CLUSContainerLogRes")
	proto.RegisterType((*CLUSProcess)(nil), "share.CLUSProcess")
	proto.RegisterType((*CLUSProcessArray)(nil), "share.CLUSProcessArray")
	proto.RegisterType((*CLUSDerivedDlpRule)(nil), "share.CLUSDerivedDlpRule")
	proto.RegisterType((*CLUSDerivedDlpRuleArray)(nil), "share.CLUSDerivedDlpRuleArray")
	proto.RegisterType((*CLUSDerivedDlpRuleMap)(nil), "share.CLUSDerivedDlpRuleMap")
	proto.RegisterMapType((map[string]*CLUSDerivedDlpRuleArray)(nil), "share.CLUSDerivedDlpRuleMap.DlpRuleMapEntry")
	proto.RegisterType((*CLUSDerivedDlpRuleEntry)(nil), "share.CLUSDerivedDlpRuleEntry")
	proto.RegisterType((*CLUSDerivedDlpRuleEntryArray)(nil), "share.CLUSDerivedDlpRuleEntryArray")
	proto.RegisterType((*CLUSDerivedDlpRuleMac)(nil), "share.CLUSDerivedDlpRuleMac")
	proto.RegisterType((*CLUSDerivedDlpRuleMacArray)(nil), "share.CLUSDerivedDlpRuleMacArray")
	proto.RegisterType((*CLUSDerivedProcessRule)(nil), "share.CLUSDerivedProcessRule")
	proto.RegisterType((*CLUSDerivedProcessRuleArray)(nil), "share.CLUSDerivedProcessRuleArray")
	proto.RegisterType((*CLUSDerivedFileRule)(nil), "share.CLUSDerivedFileRule")
	proto.RegisterType((*CLUSDerivedFileRuleArray)(nil), "share.CLUSDerivedFileRuleArray")
	proto.RegisterType((*CLUSWorkloadInterceptPort)(nil), "share.CLUSWorkloadInterceptPort")
	proto.RegisterType((*CLUSWorkloadIntercept)(nil), "share.CLUSWorkloadIntercept")
	proto.RegisterType((*CLUSMeter)(nil), "share.CLUSMeter")
	proto.RegisterType((*CLUSMeterArray)(nil), "share.CLUSMeterArray")
	proto.RegisterType((*CLUSWlIDArray)(nil), "share.CLUSWlIDArray")
	proto.RegisterEnum("share.SnifferCmd", SnifferCmd_name, SnifferCmd_value)
	proto.RegisterEnum("share.SnifferStatus", SnifferStatus_name, SnifferStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EnforcerCapServiceClient is the client API for EnforcerCapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnforcerCapServiceClient interface {
	IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error)
}

type enforcerCapServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerCapServiceClient(cc *grpc.ClientConn) EnforcerCapServiceClient {
	return &enforcerCapServiceClient{cc}
}

func (c *enforcerCapServiceClient) IsGRPCCompressed(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSBoolean, error) {
	out := new(CLUSBoolean)
	err := c.cc.Invoke(ctx, "/share.EnforcerCapService/IsGRPCCompressed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnforcerCapServiceServer is the server API for EnforcerCapService service.
type EnforcerCapServiceServer interface {
	IsGRPCCompressed(context.Context, *RPCVoid) (*CLUSBoolean, error)
}

func RegisterEnforcerCapServiceServer(s *grpc.Server, srv EnforcerCapServiceServer) {
	s.RegisterService(&_EnforcerCapService_serviceDesc, srv)
}

func _EnforcerCapService_IsGRPCCompressed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerCapServiceServer).IsGRPCCompressed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerCapService/IsGRPCCompressed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerCapServiceServer).IsGRPCCompressed(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerCapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerCapService",
	HandlerType: (*EnforcerCapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsGRPCCompressed",
			Handler:    _EnforcerCapService_IsGRPCCompressed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enforcer_service.proto",
}

// EnforcerServiceClient is the client API for EnforcerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnforcerServiceClient interface {
	Kick(ctx context.Context, in *CLUSKick, opts ...grpc.CallOption) (*RPCVoid, error)
	GetSessionList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetSessionListClient, error)
	ClearSession(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*RPCVoid, error)
	GetStats(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSStats, error)
	GetGroupStats(ctx context.Context, in *CLUSWlIDArray, opts ...grpc.CallOption) (*CLUSStats, error)
	GetSessionCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSSessionCounter, error)
	GetDatapathCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSDatapathCounter, error)
	GetDerivedPolicyRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedPolicyRuleMap, error)
	ProbeSummary(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeSummary, error)
	ProbeProcessMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeProcessArray, error)
	ProbeContainerMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeContainerArray, error)
	SnifferCmd(ctx context.Context, in *CLUSSnifferRequest, opts ...grpc.CallOption) (*CLUSSnifferResponse, error)
	GetSniffers(ctx context.Context, in *CLUSSnifferFilter, opts ...grpc.CallOption) (*CLUSSnifferArray, error)
	GetSnifferPcap(ctx context.Context, in *CLUSSnifferDownload, opts ...grpc.CallOption) (EnforcerService_GetSnifferPcapClient, error)
	GetContainerLogs(ctx context.Context, in *CLUSContainerLogReq, opts ...grpc.CallOption) (EnforcerService_GetContainerLogsClient, error)
	RunDockerBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	RunKubernetesBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	GetFileMonitorFile(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSFileMonitorFileArray, error)
	GetProcess(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error)
	GetProcessHistory(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error)
	GetDerivedDlpRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMap, error)
	GetDerivedDlpRuleEntries(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleEntryArray, error)
	GetDerivedDlpRuleMacs(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMacArray, error)
	GetDerivedWorkloadProcessRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedProcessRuleArray, error)
	GetDerivedWorkloadFileRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedFileRuleArray, error)
	GetContainerIntercept(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSWorkloadIntercept, error)
	GetMeterList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetMeterListClient, error)
	ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error)
}

type enforcerServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerServiceClient(cc *grpc.ClientConn) EnforcerServiceClient {
	return &enforcerServiceClient{cc}
}

func (c *enforcerServiceClient) Kick(ctx context.Context, in *CLUSKick, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSessionList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetSessionListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EnforcerService_serviceDesc.Streams[0], "/share.EnforcerService/GetSessionList", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetSessionListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetSessionListClient interface {
	Recv() (*CLUSSessionArray, error)
	grpc.ClientStream
}

type enforcerServiceGetSessionListClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetSessionListClient) Recv() (*CLUSSessionArray, error) {
	m := new(CLUSSessionArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) ClearSession(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/ClearSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetStats(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetGroupStats(ctx context.Context, in *CLUSWlIDArray, opts ...grpc.CallOption) (*CLUSStats, error) {
	out := new(CLUSStats)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetGroupStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSessionCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSSessionCounter, error) {
	out := new(CLUSSessionCounter)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetSessionCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDatapathCounter(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSDatapathCounter, error) {
	out := new(CLUSDatapathCounter)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDatapathCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedPolicyRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedPolicyRuleMap, error) {
	out := new(CLUSDerivedPolicyRuleMap)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedPolicyRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeSummary(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeSummary, error) {
	out := new(CLUSProbeSummary)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/ProbeSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeProcessMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeProcessArray, error) {
	out := new(CLUSProbeProcessArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/ProbeProcessMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) ProbeContainerMap(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*CLUSProbeContainerArray, error) {
	out := new(CLUSProbeContainerArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/ProbeContainerMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) SnifferCmd(ctx context.Context, in *CLUSSnifferRequest, opts ...grpc.CallOption) (*CLUSSnifferResponse, error) {
	out := new(CLUSSnifferResponse)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/SnifferCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSniffers(ctx context.Context, in *CLUSSnifferFilter, opts ...grpc.CallOption) (*CLUSSnifferArray, error) {
	out := new(CLUSSnifferArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetSniffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetSnifferPcap(ctx context.Context, in *CLUSSnifferDownload, opts ...grpc.CallOption) (EnforcerService_GetSnifferPcapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EnforcerService_serviceDesc.Streams[1], "/share.EnforcerService/GetSnifferPcap", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetSnifferPcapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetSnifferPcapClient interface {
	Recv() (*CLUSSnifferPcap, error)
	grpc.ClientStream
}

type enforcerServiceGetSnifferPcapClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetSnifferPcapClient) Recv() (*CLUSSnifferPcap, error) {
	m := new(CLUSSnifferPcap)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) GetContainerLogs(ctx context.Context, in *CLUSContainerLogReq, opts ...grpc.CallOption) (EnforcerService_GetContainerLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EnforcerService_serviceDesc.Streams[2], "/share.EnforcerService/GetContainerLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetContainerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetContainerLogsClient interface {
	Recv() (*CLUSContainerLogRes, error)
	grpc.ClientStream
}

type enforcerServiceGetContainerLogsClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetContainerLogsClient) Recv() (*CLUSContainerLogRes, error) {
	m := new(CLUSContainerLogRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) RunDockerBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/RunDockerBench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) RunKubernetesBench(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/RunKubernetesBench", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetFileMonitorFile(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSFileMonitorFileArray, error) {
	out := new(CLUSFileMonitorFileArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetFileMonitorFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetProcess(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error) {
	out := new(CLUSProcessArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetProcessHistory(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSProcessArray, error) {
	out := new(CLUSProcessArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetProcessHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRules(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMap, error) {
	out := new(CLUSDerivedDlpRuleMap)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRuleEntries(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleEntryArray, error) {
	out := new(CLUSDerivedDlpRuleEntryArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRuleEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedDlpRuleMacs(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedDlpRuleMacArray, error) {
	out := new(CLUSDerivedDlpRuleMacArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedDlpRuleMacs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedWorkloadProcessRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedProcessRuleArray, error) {
	out := new(CLUSDerivedProcessRuleArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedWorkloadProcessRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetDerivedWorkloadFileRule(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSDerivedFileRuleArray, error) {
	out := new(CLUSDerivedFileRuleArray)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetDerivedWorkloadFileRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetContainerIntercept(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (*CLUSWorkloadIntercept, error) {
	out := new(CLUSWorkloadIntercept)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/GetContainerIntercept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enforcerServiceClient) GetMeterList(ctx context.Context, in *CLUSFilter, opts ...grpc.CallOption) (EnforcerService_GetMeterListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EnforcerService_serviceDesc.Streams[3], "/share.EnforcerService/GetMeterList", opts...)
	if err != nil {
		return nil, err
	}
	x := &enforcerServiceGetMeterListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnforcerService_GetMeterListClient interface {
	Recv() (*CLUSMeterArray, error)
	grpc.ClientStream
}

type enforcerServiceGetMeterListClient struct {
	grpc.ClientStream
}

func (x *enforcerServiceGetMeterListClient) Recv() (*CLUSMeterArray, error) {
	m := new(CLUSMeterArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enforcerServiceClient) ProfilingCmd(ctx context.Context, in *CLUSProfilingRequest, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.EnforcerService/ProfilingCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnforcerServiceServer is the server API for EnforcerService service.
type EnforcerServiceServer interface {
	Kick(context.Context, *CLUSKick) (*RPCVoid, error)
	GetSessionList(*CLUSFilter, EnforcerService_GetSessionListServer) error
	ClearSession(context.Context, *CLUSFilter) (*RPCVoid, error)
	GetStats(context.Context, *CLUSFilter) (*CLUSStats, error)
	GetGroupStats(context.Context, *CLUSWlIDArray) (*CLUSStats, error)
	GetSessionCounter(context.Context, *RPCVoid) (*CLUSSessionCounter, error)
	GetDatapathCounter(context.Context, *RPCVoid) (*CLUSDatapathCounter, error)
	GetDerivedPolicyRules(context.Context, *CLUSFilter) (*CLUSDerivedPolicyRuleMap, error)
	ProbeSummary(context.Context, *RPCVoid) (*CLUSProbeSummary, error)
	ProbeProcessMap(context.Context, *RPCVoid) (*CLUSProbeProcessArray, error)
	ProbeContainerMap(context.Context, *RPCVoid) (*CLUSProbeContainerArray, error)
	SnifferCmd(context.Context, *CLUSSnifferRequest) (*CLUSSnifferResponse, error)
	GetSniffers(context.Context, *CLUSSnifferFilter) (*CLUSSnifferArray, error)
	GetSnifferPcap(*CLUSSnifferDownload, EnforcerService_GetSnifferPcapServer) error
	GetContainerLogs(*CLUSContainerLogReq, EnforcerService_GetContainerLogsServer) error
	RunDockerBench(context.Context, *RPCVoid) (*RPCVoid, error)
	RunKubernetesBench(context.Context, *RPCVoid) (*RPCVoid, error)
	GetFileMonitorFile(context.Context, *CLUSFilter) (*CLUSFileMonitorFileArray, error)
	GetProcess(context.Context, *CLUSFilter) (*CLUSProcessArray, error)
	GetProcessHistory(context.Context, *CLUSFilter) (*CLUSProcessArray, error)
	GetDerivedDlpRules(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleMap, error)
	GetDerivedDlpRuleEntries(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleEntryArray, error)
	GetDerivedDlpRuleMacs(context.Context, *CLUSFilter) (*CLUSDerivedDlpRuleMacArray, error)
	GetDerivedWorkloadProcessRule(context.Context, *CLUSFilter) (*CLUSDerivedProcessRuleArray, error)
	GetDerivedWorkloadFileRule(context.Context, *CLUSFilter) (*CLUSDerivedFileRuleArray, error)
	GetContainerIntercept(context.Context, *CLUSFilter) (*CLUSWorkloadIntercept, error)
	GetMeterList(*CLUSFilter, EnforcerService_GetMeterListServer) error
	ProfilingCmd(context.Context, *CLUSProfilingRequest) (*RPCVoid, error)
}

func RegisterEnforcerServiceServer(s *grpc.Server, srv EnforcerServiceServer) {
	s.RegisterService(&_EnforcerService_serviceDesc, srv)
}

func _EnforcerService_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).Kick(ctx, req.(*CLUSKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSessionList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetSessionList(m, &enforcerServiceGetSessionListServer{stream})
}

type EnforcerService_GetSessionListServer interface {
	Send(*CLUSSessionArray) error
	grpc.ServerStream
}

type enforcerServiceGetSessionListServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetSessionListServer) Send(m *CLUSSessionArray) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_ClearSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ClearSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ClearSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ClearSession(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetStats(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetGroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSWlIDArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetGroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetGroupStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetGroupStats(ctx, req.(*CLUSWlIDArray))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSessionCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetSessionCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetSessionCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetSessionCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDatapathCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDatapathCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDatapathCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDatapathCounter(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedPolicyRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedPolicyRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedPolicyRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedPolicyRules(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeSummary(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeProcessMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeProcessMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeProcessMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeProcessMap(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_ProbeContainerMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProbeContainerMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProbeContainerMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProbeContainerMap(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_SnifferCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSnifferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).SnifferCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/SnifferCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).SnifferCmd(ctx, req.(*CLUSSnifferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSniffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSSnifferFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetSniffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetSniffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetSniffers(ctx, req.(*CLUSSnifferFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetSnifferPcap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSSnifferDownload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetSnifferPcap(m, &enforcerServiceGetSnifferPcapServer{stream})
}

type EnforcerService_GetSnifferPcapServer interface {
	Send(*CLUSSnifferPcap) error
	grpc.ServerStream
}

type enforcerServiceGetSnifferPcapServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetSnifferPcapServer) Send(m *CLUSSnifferPcap) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_GetContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSContainerLogReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetContainerLogs(m, &enforcerServiceGetContainerLogsServer{stream})
}

type EnforcerService_GetContainerLogsServer interface {
	Send(*CLUSContainerLogRes) error
	grpc.ServerStream
}

type enforcerServiceGetContainerLogsServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetContainerLogsServer) Send(m *CLUSContainerLogRes) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_RunDockerBench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).RunDockerBench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/RunDockerBench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).RunDockerBench(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_RunKubernetesBench_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).RunKubernetesBench(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/RunKubernetesBench",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).RunKubernetesBench(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetFileMonitorFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetFileMonitorFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetFileMonitorFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetFileMonitorFile(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetProcess(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetProcessHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetProcessHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetProcessHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetProcessHistory(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRules(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRuleEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRuleEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleEntries(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedDlpRuleMacs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleMacs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedDlpRuleMacs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedDlpRuleMacs(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedWorkloadProcessRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadProcessRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedWorkloadProcessRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadProcessRule(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetDerivedWorkloadFileRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadFileRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetDerivedWorkloadFileRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetDerivedWorkloadFileRule(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetContainerIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).GetContainerIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/GetContainerIntercept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).GetContainerIntercept(ctx, req.(*CLUSFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnforcerService_GetMeterList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CLUSFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnforcerServiceServer).GetMeterList(m, &enforcerServiceGetMeterListServer{stream})
}

type EnforcerService_GetMeterListServer interface {
	Send(*CLUSMeterArray) error
	grpc.ServerStream
}

type enforcerServiceGetMeterListServer struct {
	grpc.ServerStream
}

func (x *enforcerServiceGetMeterListServer) Send(m *CLUSMeterArray) error {
	return x.ServerStream.SendMsg(m)
}

func _EnforcerService_ProfilingCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLUSProfilingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerServiceServer).ProfilingCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerService/ProfilingCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerServiceServer).ProfilingCmd(ctx, req.(*CLUSProfilingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerService",
	HandlerType: (*EnforcerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kick",
			Handler:    _EnforcerService_Kick_Handler,
		},
		{
			MethodName: "ClearSession",
			Handler:    _EnforcerService_ClearSession_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _EnforcerService_GetStats_Handler,
		},
		{
			MethodName: "GetGroupStats",
			Handler:    _EnforcerService_GetGroupStats_Handler,
		},
		{
			MethodName: "GetSessionCounter",
			Handler:    _EnforcerService_GetSessionCounter_Handler,
		},
		{
			MethodName: "GetDatapathCounter",
			Handler:    _EnforcerService_GetDatapathCounter_Handler,
		},
		{
			MethodName: "GetDerivedPolicyRules",
			Handler:    _EnforcerService_GetDerivedPolicyRules_Handler,
		},
		{
			MethodName: "ProbeSummary",
			Handler:    _EnforcerService_ProbeSummary_Handler,
		},
		{
			MethodName: "ProbeProcessMap",
			Handler:    _EnforcerService_ProbeProcessMap_Handler,
		},
		{
			MethodName: "ProbeContainerMap",
			Handler:    _EnforcerService_ProbeContainerMap_Handler,
		},
		{
			MethodName: "SnifferCmd",
			Handler:    _EnforcerService_SnifferCmd_Handler,
		},
		{
			MethodName: "GetSniffers",
			Handler:    _EnforcerService_GetSniffers_Handler,
		},
		{
			MethodName: "RunDockerBench",
			Handler:    _EnforcerService_RunDockerBench_Handler,
		},
		{
			MethodName: "RunKubernetesBench",
			Handler:    _EnforcerService_RunKubernetesBench_Handler,
		},
		{
			MethodName: "GetFileMonitorFile",
			Handler:    _EnforcerService_GetFileMonitorFile_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _EnforcerService_GetProcess_Handler,
		},
		{
			MethodName: "GetProcessHistory",
			Handler:    _EnforcerService_GetProcessHistory_Handler,
		},
		{
			MethodName: "GetDerivedDlpRules",
			Handler:    _EnforcerService_GetDerivedDlpRules_Handler,
		},
		{
			MethodName: "GetDerivedDlpRuleEntries",
			Handler:    _EnforcerService_GetDerivedDlpRuleEntries_Handler,
		},
		{
			MethodName: "GetDerivedDlpRuleMacs",
			Handler:    _EnforcerService_GetDerivedDlpRuleMacs_Handler,
		},
		{
			MethodName: "GetDerivedWorkloadProcessRule",
			Handler:    _EnforcerService_GetDerivedWorkloadProcessRule_Handler,
		},
		{
			MethodName: "GetDerivedWorkloadFileRule",
			Handler:    _EnforcerService_GetDerivedWorkloadFileRule_Handler,
		},
		{
			MethodName: "GetContainerIntercept",
			Handler:    _EnforcerService_GetContainerIntercept_Handler,
		},
		{
			MethodName: "ProfilingCmd",
			Handler:    _EnforcerService_ProfilingCmd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSessionList",
			Handler:       _EnforcerService_GetSessionList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSnifferPcap",
			Handler:       _EnforcerService_GetSnifferPcap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContainerLogs",
			Handler:       _EnforcerService_GetContainerLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeterList",
			Handler:       _EnforcerService_GetMeterList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "enforcer_service.proto",
}

// EnforcerScanServiceClient is the client API for EnforcerScanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnforcerScanServiceClient interface {
	ScanGetFiles(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanData, error)
}

type enforcerScanServiceClient struct {
	cc *grpc.ClientConn
}

func NewEnforcerScanServiceClient(cc *grpc.ClientConn) EnforcerScanServiceClient {
	return &enforcerScanServiceClient{cc}
}

func (c *enforcerScanServiceClient) ScanGetFiles(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanData, error) {
	out := new(ScanData)
	err := c.cc.Invoke(ctx, "/share.EnforcerScanService/ScanGetFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnforcerScanServiceServer is the server API for EnforcerScanService service.
type EnforcerScanServiceServer interface {
	ScanGetFiles(context.Context, *ScanRunningRequest) (*ScanData, error)
}

func RegisterEnforcerScanServiceServer(s *grpc.Server, srv EnforcerScanServiceServer) {
	s.RegisterService(&_EnforcerScanService_serviceDesc, srv)
}

func _EnforcerScanService_ScanGetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnforcerScanServiceServer).ScanGetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.EnforcerScanService/ScanGetFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnforcerScanServiceServer).ScanGetFiles(ctx, req.(*ScanRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnforcerScanService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.EnforcerScanService",
	HandlerType: (*EnforcerScanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanGetFiles",
			Handler:    _EnforcerScanService_ScanGetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enforcer_service.proto",
}

func init() {
	proto.RegisterFile("enforcer_service.proto", fileDescriptor_enforcer_service_d7f6058b9d2feaed)
}

var fileDescriptor_enforcer_service_d7f6058b9d2feaed = []byte{
	// 3761 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x5a, 0x4f, 0x73, 0x1b, 0x39,
	0x76, 0x5f, 0x92, 0xfa, 0x43, 0x42, 0xa2, 0x24, 0xb7, 0x35, 0x76, 0x9b, 0xf6, 0x78, 0x34, 0x3d,
	0x3b, 0x1b, 0x65, 0x32, 0xe5, 0xf5, 0x6a, 0xe7, 0xcf, 0xc6, 0xa9, 0x9a, 0x19, 0x8a, 0x94, 0x64,
	0xd6, 0x88, 0x0e, 0x0d, 0xca, 0x6b, 0x27, 0x95, 0xad, 0x54, 0x9b, 0x04, 0xa5, 0x2e, 0x91, 0xdd,
	0xbd, 0x68, 0x50, 0xb6, 0x72, 0xcd, 0x21, 0x1f, 0x21, 0x87, 0x54, 0x3e, 0x44, 0xee, 0xa9, 0x54,
	0xa5, 0x2a, 0x95, 0x43, 0x3e, 0x40, 0x6e, 0xa9, 0xdc, 0x73, 0xcb, 0x27, 0x48, 0xea, 0xbd, 0x07,
	0x74, 0x03, 0x4d, 0x4a, 0x9e, 0x3d, 0x11, 0xef, 0x87, 0x87, 0x07, 0xe0, 0x01, 0x78, 0xff, 0x9a,
	0xec, 0x9e, 0x88, 0x27, 0x89, 0x1c, 0x09, 0xf9, 0xd7, 0x99, 0x90, 0x57, 0xd1, 0x48, 0x3c, 0x49,
	0x65, 0xa2, 0x12, 0x6f, 0x35, 0xbb, 0x08, 0xa5, 0x68, 0x6d, 0x8e, 0x92, 0xd9, 0x2c, 0x89, 0x09,
	0x6c, 0xb1, 0x6c, 0x14, 0xea, 0x76, 0xf0, 0x8c, 0xd5, 0x3b, 0xa7, 0xaf, 0x86, 0x3f, 0x46, 0xa3,
	0x4b, 0xef, 0x1e, 0x5b, 0xeb, 0x28, 0x39, 0xed, 0x75, 0xfd, 0xca, 0x5e, 0x65, 0xbf, 0xc1, 0x35,
	0x05, 0x38, 0x17, 0x61, 0x96, 0xc4, 0x7e, 0x95, 0x70, 0xa2, 0x82, 0x31, 0x63, 0x30, 0xf6, 0x38,
	0x9a, 0x2a, 0x21, 0xbd, 0x16, 0xab, 0xbf, 0x4e, 0xe4, 0xe5, 0x34, 0x09, 0xc7, 0x7a, 0x7c, 0x4e,
	0x7b, 0x5b, 0xac, 0xda, 0xeb, 0xe2, 0xe8, 0x26, 0xaf, 0xf6, 0xba, 0xde, 0x2e, 0x5b, 0x1d, 0xaa,
	0x50, 0x2a, 0xbf, 0x86, 0x10, 0x11, 0x80, 0x9e, 0x46, 0xb3, 0x48, 0xf9, 0x2b, 0x84, 0x22, 0x11,
	0xfc, 0xdf, 0x3a, 0xdb, 0x80, 0x69, 0x86, 0x22, 0xcb, 0xa2, 0x24, 0xd6, 0xb2, 0x2a, 0xb9, 0x2c,
	0x7b, 0xde, 0x6a, 0x69, 0xde, 0x47, 0xac, 0x71, 0xa4, 0x2e, 0x84, 0x3c, 0xbb, 0x4e, 0x85, 0x9e,
	0xab, 0x00, 0x3c, 0x9f, 0xad, 0xf7, 0x06, 0x03, 0x50, 0x83, 0x9e, 0xd1, 0x90, 0x30, 0xae, 0x33,
	0x8d, 0x44, 0xac, 0xfa, 0xed, 0x8e, 0xbf, 0xba, 0x57, 0xd9, 0xdf, 0xe4, 0x05, 0x00, 0xbd, 0x43,
	0x21, 0xaf, 0x84, 0x84, 0xde, 0x35, 0xea, 0xcd, 0x01, 0x58, 0x0f, 0xb1, 0xf6, 0x06, 0xfe, 0x3a,
	0x76, 0xe6, 0x34, 0xf4, 0x11, 0x63, 0x6f, 0xe0, 0xd7, 0xa9, 0xcf, 0xd0, 0xde, 0x63, 0xc6, 0x88,
	0x6f, 0x90, 0x48, 0xe5, 0x37, 0x70, 0x41, 0x16, 0x02, 0xfd, 0xc4, 0x8b, 0xfd, 0x8c, 0xfa, 0x0b,
	0x04, 0x64, 0xf7, 0x3a, 0xfd, 0x41, 0x27, 0x19, 0x0b, 0x7f, 0x03, 0x7b, 0x73, 0xda, 0xf4, 0xa1,
	0x1a, 0x36, 0x8b, 0x3e, 0xd4, 0xc2, 0x1e, 0xdb, 0xa0, 0x59, 0x86, 0x2a, 0x54, 0xc2, 0x6f, 0x62,
	0xb7, 0x0d, 0x01, 0x07, 0xcd, 0x43, 0x1c, 0x5b, 0xc4, 0x61, 0x41, 0xd6, 0xda, 0x2f, 0x55, 0xe6,
	0x6f, 0x3b, 0x6b, 0xbf, 0x54, 0x99, 0xb5, 0x76, 0xe8, 0xdf, 0x71, 0xd6, 0x0e, 0xfd, 0xf9, 0x1a,
	0x0e, 0xaf, 0x95, 0xc8, 0xfc, 0x3b, 0x7b, 0x95, 0xfd, 0x15, 0x6e, 0x43, 0xc5, 0x1a, 0x88, 0xc3,
	0x23, 0x0e, 0x0b, 0x02, 0x8e, 0x76, 0x9a, 0x4e, 0xa3, 0x51, 0xa8, 0xa2, 0x24, 0xf6, 0xef, 0xd2,
	0x2a, 0x2d, 0xc8, 0xdb, 0x61, 0xb5, 0xf6, 0xb9, 0xf0, 0x77, 0xb1, 0x07, 0x9a, 0x9e, 0xc7, 0x56,
	0x7a, 0xe3, 0xa9, 0xf0, 0x3f, 0x42, 0x08, 0xdb, 0x80, 0x9d, 0x46, 0x13, 0xe1, 0xdf, 0x23, 0x0c,
	0xda, 0x78, 0x53, 0xe2, 0x73, 0x29, 0xb2, 0xcc, 0xbf, 0xbf, 0x57, 0xd9, 0xaf, 0x73, 0x43, 0x82,
	0xcc, 0xb3, 0x30, 0xf5, 0x7d, 0x44, 0xa1, 0x09, 0x48, 0x3f, 0x1a, 0xfb, 0x0f, 0x08, 0xe9, 0x47,
	0x63, 0xd0, 0xfe, 0x20, 0x99, 0x46, 0xa3, 0xeb, 0xde, 0xd8, 0x6f, 0x91, 0xf6, 0x0d, 0xed, 0x05,
	0x6c, 0x93, 0xda, 0xed, 0x11, 0x2e, 0xfb, 0x21, 0xf6, 0x3b, 0x98, 0xf7, 0x73, 0xd6, 0x24, 0x55,
	0xb4, 0xb3, 0x19, 0x2a, 0xf0, 0x11, 0x32, 0xb9, 0x20, 0x70, 0x91, 0x3a, 0x0c, 0xd7, 0xc7, 0xc4,
	0xe5, 0x80, 0xde, 0x2f, 0xd8, 0x56, 0x3e, 0x8c, 0x54, 0xf9, 0x18, 0x55, 0x59, 0x42, 0x81, 0x2f,
	0x1f, 0x48, 0x7c, 0x9f, 0x10, 0x9f, 0x8b, 0xc2, 0xde, 0x9e, 0x27, 0x99, 0xea, 0xc3, 0xad, 0xdb,
	0xc3, 0x2d, 0xe7, 0x34, 0xbc, 0xe7, 0x37, 0x93, 0x49, 0x6f, 0xe0, 0x7f, 0x8a, 0x57, 0x9d, 0x08,
	0xb0, 0x26, 0x6f, 0x26, 0x93, 0x76, 0x9a, 0xfa, 0x01, 0x2e, 0x50, 0x53, 0xa0, 0xe3, 0x37, 0x93,
	0x09, 0x5e, 0xee, 0xcf, 0xe8, 0x35, 0x6a, 0x32, 0x38, 0x64, 0x3b, 0x96, 0x01, 0x68, 0x4b, 0x19,
	0x5e, 0x7b, 0x4f, 0xe0, 0x25, 0x21, 0x9d, 0xf9, 0x95, 0xbd, 0xda, 0xfe, 0xc6, 0x81, 0xf7, 0x04,
	0x6d, 0xdd, 0x13, 0x8b, 0x95, 0xe7, 0x3c, 0xc1, 0x7f, 0x56, 0x98, 0x67, 0xf5, 0x74, 0x92, 0x79,
	0x0c, 0x46, 0x0b, 0x2e, 0xde, 0x5c, 0x5a, 0x92, 0xe8, 0xf2, 0x17, 0x10, 0x2a, 0x6c, 0x2e, 0xcf,
	0x3a, 0x83, 0x9c, 0x89, 0xcc, 0x58, 0x09, 0xd5, 0x7c, 0xaf, 0xba, 0x05, 0x5f, 0x2d, 0xe7, 0xb3,
	0x50, 0x6f, 0x9f, 0x6d, 0x77, 0xe6, 0x12, 0x5e, 0x5f, 0xce, 0x48, 0xc6, 0xa7, 0x0c, 0xe3, 0xb1,
	0xcf, 0x65, 0xaf, 0xe0, 0x5b, 0xd5, 0xc7, 0x6e, 0x83, 0xc1, 0x7f, 0x33, 0x76, 0x17, 0x36, 0xd6,
	0x0d, 0x55, 0x98, 0x86, 0xea, 0xc2, 0xec, 0xec, 0x11, 0x6b, 0xf0, 0x37, 0x83, 0x70, 0x74, 0x29,
	0x14, 0xed, 0x6b, 0x85, 0x17, 0x00, 0xc8, 0xe6, 0x6f, 0xba, 0x32, 0x49, 0x0d, 0x47, 0x15, 0x39,
	0x5c, 0x10, 0x64, 0x9c, 0xe5, 0x32, 0x6a, 0x24, 0xe3, 0xcc, 0x96, 0x71, 0xe6, 0xc8, 0x58, 0x21,
	0x19, 0x0e, 0x08, 0x17, 0xfc, 0x48, 0xca, 0x44, 0x1a, 0xa6, 0x55, 0x64, 0x72, 0x30, 0xef, 0x4b,
	0x76, 0xe7, 0x45, 0x62, 0x8c, 0xb6, 0x61, 0x5c, 0x43, 0xc6, 0xc5, 0x0e, 0x38, 0xb3, 0xde, 0xe0,
	0xea, 0x2b, 0xc3, 0xb7, 0x4e, 0xa6, 0xc0, 0x82, 0x34, 0xc7, 0x37, 0x86, 0xa3, 0x9e, 0x73, 0x18,
	0x08, 0x0c, 0xd2, 0x59, 0x67, 0x60, 0x18, 0x1a, 0xc8, 0x60, 0x21, 0xde, 0x53, 0x76, 0xf7, 0xac,
	0x33, 0x78, 0x91, 0x68, 0x35, 0x1b, 0x46, 0x86, 0x8c, 0xcb, 0xba, 0x40, 0xe2, 0xab, 0x6e, 0x2e,
	0x71, 0x83, 0x24, 0x16, 0x08, 0xae, 0xa9, 0xd3, 0xcf, 0x19, 0x36, 0xf5, 0x9a, 0x0a, 0x08, 0x34,
	0xf5, 0xe7, 0xe0, 0x9b, 0x0c, 0x4b, 0x93, 0x34, 0x65, 0x63, 0x70, 0x22, 0xc7, 0x32, 0x3c, 0x9f,
	0x89, 0x58, 0x65, 0x68, 0x88, 0x57, 0x78, 0x01, 0x78, 0x5f, 0xb0, 0x9d, 0xb3, 0x68, 0x26, 0x92,
	0xb9, 0x2a, 0x98, 0xb6, 0x91, 0x69, 0x01, 0xc7, 0xd3, 0x4b, 0x54, 0x38, 0xcd, 0x6f, 0xd7, 0x8e,
	0x3e, 0x3d, 0x1b, 0x84, 0x55, 0xdb, 0x57, 0x5f, 0x1b, 0x66, 0xfb, 0xde, 0xef, 0xb1, 0x0d, 0xfb,
	0xd2, 0x6b, 0xc3, 0x6c, 0xdf, 0xf8, 0x80, 0x6d, 0x3a, 0xd7, 0xfd, 0x2e, 0xed, 0xcb, 0xb9, 0xeb,
	0x8f, 0x19, 0xb3, 0x2e, 0xfa, 0x2e, 0x69, 0xaf, 0xe7, 0xf4, 0xc3, 0xa5, 0xea, 0x0b, 0x25, 0x64,
	0x86, 0xe6, 0x7a, 0x85, 0x5b, 0x08, 0xac, 0x62, 0x20, 0x93, 0xf7, 0xd7, 0x9a, 0xe1, 0x1e, 0xad,
	0xc2, 0x82, 0xd0, 0xa5, 0xcf, 0xa5, 0xee, 0xbf, 0x4f, 0x9a, 0xcb, 0x01, 0x58, 0x63, 0x67, 0x2e,
	0x4f, 0x93, 0xf3, 0x4e, 0x38, 0xba, 0x10, 0x19, 0xda, 0xf3, 0x15, 0xee, 0x60, 0xf0, 0xc2, 0x8f,
	0xa5, 0x10, 0xe3, 0x42, 0xb7, 0x0f, 0xc8, 0x24, 0xba, 0x28, 0xcc, 0xd4, 0xce, 0x32, 0x31, 0x7b,
	0x3b, 0xbd, 0xce, 0xd0, 0xde, 0xaf, 0xf0, 0x02, 0xc8, 0xa5, 0x14, 0x2c, 0x0f, 0x2d, 0x29, 0x0e,
	0xdf, 0x20, 0x94, 0x99, 0x28, 0x8c, 0xd3, 0xa3, 0xbd, 0x1a, 0xf0, 0xb9, 0x28, 0x9c, 0x23, 0x21,
	0xe6, 0xda, 0x7c, 0x8c, 0x6c, 0x2e, 0x08, 0x37, 0x83, 0x5c, 0x0a, 0xb8, 0xfc, 0x5f, 0xf1, 0xf9,
	0x54, 0x1b, 0xfe, 0x26, 0x5f, 0xc0, 0x5d, 0xde, 0x03, 0xe2, 0xfd, 0xa4, 0xcc, 0x4b, 0x38, 0xce,
	0x8e, 0x58, 0x37, 0x99, 0x85, 0x51, 0x9c, 0xa1, 0x0f, 0x68, 0x72, 0x17, 0x04, 0x9b, 0x67, 0x03,
	0xbd, 0x41, 0x86, 0x2e, 0xa1, 0xc9, 0xcb, 0x30, 0x9c, 0xf3, 0x49, 0xc2, 0x93, 0xb9, 0x8a, 0x62,
	0x91, 0x69, 0x07, 0x61, 0x21, 0xe8, 0x9c, 0xb3, 0x64, 0x82, 0x1e, 0x62, 0x93, 0x63, 0x1b, 0x02,
	0xc2, 0xc1, 0xd0, 0xff, 0x39, 0x22, 0xd5, 0xc1, 0x10, 0x34, 0x87, 0x91, 0x23, 0x5c, 0x8f, 0x4e,
	0x12, 0xc7, 0x99, 0xff, 0x39, 0x69, 0xd8, 0x45, 0x73, 0xbe, 0x41, 0x98, 0x65, 0xc4, 0xf7, 0x0b,
	0x8b, 0x2f, 0x47, 0x83, 0x37, 0x6c, 0x17, 0x0d, 0xac, 0x90, 0xd1, 0x95, 0x18, 0x6b, 0xcf, 0x9c,
	0xa2, 0xa3, 0x07, 0x2f, 0x56, 0xd1, 0xe1, 0x44, 0x9a, 0x82, 0x6b, 0xd3, 0x6e, 0x9c, 0x7c, 0x84,
	0xa6, 0x30, 0x80, 0x9e, 0x4f, 0x45, 0xaf, 0xab, 0x7d, 0x82, 0xa6, 0x82, 0x7f, 0xa9, 0xb2, 0x8f,
	0x16, 0x44, 0x43, 0xdf, 0x42, 0x90, 0x0b, 0x01, 0xb3, 0x1c, 0xf5, 0x06, 0x28, 0x78, 0x93, 0x13,
	0x01, 0x68, 0x37, 0x83, 0x38, 0xb3, 0x46, 0x28, 0x12, 0x30, 0x1b, 0x76, 0x73, 0x34, 0xc8, 0x9b,
	0x5c, 0x53, 0x80, 0x23, 0x03, 0xd7, 0x11, 0xad, 0xa6, 0x40, 0xa7, 0xe8, 0x75, 0xd7, 0x28, 0xe0,
	0xc1, 0x60, 0x72, 0x97, 0xad, 0xc2, 0x2f, 0x47, 0xeb, 0xda, 0xe4, 0x44, 0xd8, 0x01, 0x73, 0xdd,
	0x0d, 0x98, 0x8b, 0x9d, 0x37, 0x9c, 0x9d, 0x5b, 0x81, 0x13, 0x73, 0x03, 0x27, 0x8f, 0xad, 0x1c,
	0xbf, 0xec, 0xbe, 0x40, 0x4b, 0xd9, 0xe0, 0xd8, 0xf6, 0x7e, 0xc9, 0x56, 0xda, 0x69, 0x0a, 0xc6,
	0x11, 0x1c, 0xfa, 0x43, 0xcb, 0xa1, 0x97, 0x95, 0xcf, 0x91, 0x31, 0x18, 0xb0, 0xd6, 0x52, 0xfd,
	0x51, 0x8c, 0x70, 0xc0, 0x56, 0xe9, 0xf6, 0x52, 0x80, 0xf0, 0xe8, 0x26, 0x79, 0xc0, 0xc4, 0x89,
	0x35, 0xf8, 0xd7, 0x0a, 0xf3, 0x97, 0x32, 0xf4, 0xc3, 0xd4, 0x3b, 0x66, 0xeb, 0xba, 0xa9, 0x45,
	0x7e, 0x79, 0x9b, 0xc8, 0x7e, 0x98, 0x3e, 0xd1, 0xbf, 0x47, 0xb1, 0x92, 0xd7, 0xdc, 0x0c, 0x6e,
	0xfd, 0x8e, 0x6d, 0xda, 0x1d, 0x70, 0x93, 0x2e, 0xc5, 0xb5, 0xce, 0x9a, 0xa0, 0xe9, 0x7d, 0xcb,
	0x56, 0xaf, 0xc2, 0xe9, 0x5c, 0xe0, 0x79, 0x6f, 0x1c, 0x7c, 0x7a, 0xdb, 0x3c, 0xb8, 0x59, 0x4e,
	0xfc, 0xcf, 0xaa, 0xbf, 0xa9, 0x04, 0xff, 0x5c, 0xa7, 0x80, 0x69, 0x20, 0x93, 0xb7, 0x62, 0x38,
	0x9f, 0xcd, 0x42, 0x79, 0x8d, 0x16, 0x2e, 0x89, 0x55, 0x18, 0xc5, 0x42, 0xd2, 0x06, 0x30, 0xd0,
	0xb4, 0x31, 0x7c, 0xa7, 0xd1, 0xd8, 0x61, 0xab, 0xea, 0x77, 0xea, 0xc2, 0xf0, 0x4e, 0x07, 0xd1,
	0x78, 0x20, 0x93, 0x11, 0x30, 0xd1, 0xad, 0xb6, 0x10, 0x98, 0xed, 0x85, 0x78, 0x07, 0x94, 0xc8,
	0x32, 0x61, 0x42, 0x1c, 0x07, 0x03, 0xdb, 0xf1, 0x42, 0xbc, 0x1b, 0xce, 0xb3, 0x34, 0x1a, 0x01,
	0x6a, 0xe2, 0x1b, 0x07, 0xc4, 0xb8, 0xca, 0xcc, 0x3c, 0x54, 0x49, 0x9a, 0xe9, 0x7b, 0x5a, 0x42,
	0xbd, 0x2f, 0xd8, 0xd6, 0xeb, 0xd3, 0xa1, 0x4a, 0x64, 0x78, 0x2e, 0x5e, 0x87, 0x6a, 0x74, 0x41,
	0x57, 0xf7, 0xb0, 0xea, 0x57, 0x78, 0xa9, 0x07, 0x6e, 0xeb, 0x20, 0x1a, 0x0f, 0x85, 0xd2, 0xd7,
	0x58, 0x53, 0xb0, 0x6a, 0x6d, 0x57, 0xcf, 0xc2, 0xb7, 0x53, 0xa1, 0xef, 0xb2, 0x83, 0xc1, 0x7a,
	0x7a, 0x71, 0xa2, 0xa2, 0xc9, 0x35, 0xca, 0x12, 0x99, 0x4e, 0xc5, 0x4a, 0x28, 0xda, 0x6f, 0x99,
	0x8c, 0x0e, 0xa7, 0xc9, 0xe8, 0x92, 0x27, 0x89, 0x8e, 0x09, 0x9a, 0xbc, 0x84, 0x3a, 0x7c, 0xfd,
	0x50, 0x5e, 0x66, 0x3a, 0x41, 0x2b, 0xa1, 0x10, 0x23, 0xe5, 0x08, 0xde, 0x9a, 0x4e, 0xac, 0x74,
	0xb2, 0xb6, 0xd8, 0xe1, 0x3d, 0x61, 0x5e, 0x0e, 0x76, 0x23, 0xd9, 0x4f, 0x62, 0x60, 0xa7, 0xcc,
	0x6d, 0x49, 0x0f, 0x9c, 0xc5, 0x71, 0x34, 0x15, 0xfd, 0x24, 0x3e, 0xba, 0xca, 0xc3, 0x86, 0x26,
	0x77, 0x41, 0x8b, 0xeb, 0x44, 0x26, 0xf3, 0xd4, 0x64, 0x72, 0x2e, 0x88, 0x1e, 0x8e, 0x80, 0xe3,
	0x90, 0x76, 0x7e, 0x87, 0x76, 0xe4, 0xa2, 0xb0, 0xa3, 0x1c, 0xe9, 0xc7, 0x8a, 0x58, 0x3d, 0xda,
	0xd1, 0x42, 0x87, 0xc3, 0x0d, 0xeb, 0x46, 0x55, 0xdd, 0x2d, 0x71, 0x9b, 0x0e, 0x77, 0x0d, 0x68,
	0x03, 0x76, 0xcb, 0x6b, 0x40, 0xff, 0x65, 0xf3, 0x0d, 0x42, 0x75, 0x91, 0xe9, 0x54, 0xb0, 0x84,
	0x5a, 0x3b, 0xc7, 0x49, 0x32, 0x9d, 0x1d, 0xba, 0x20, 0xdc, 0x1f, 0x0d, 0xf4, 0xe2, 0xd7, 0x63,
	0x0a, 0x33, 0x9a, 0xdc, 0xc1, 0xac, 0x19, 0x7b, 0x31, 0xcd, 0xe8, 0x3b, 0x33, 0x6a, 0xd4, 0x9a,
	0xb1, 0x17, 0xe3, 0x8c, 0x0f, 0x9c, 0x19, 0x09, 0x04, 0xad, 0xf4, 0xc3, 0xf7, 0x47, 0x57, 0xe1,
	0xb4, 0x73, 0x11, 0xc6, 0x2f, 0xe7, 0x62, 0x2e, 0x4c, 0x8e, 0xb9, 0xd8, 0x01, 0x32, 0xfb, 0xe1,
	0xfb, 0x93, 0x44, 0x1a, 0x07, 0x4b, 0xd9, 0xa6, 0x0b, 0x06, 0xff, 0x53, 0xb1, 0xcc, 0x87, 0x7e,
	0xae, 0x60, 0xa2, 0x06, 0x11, 0x15, 0x76, 0x56, 0x39, 0x34, 0xd1, 0x6d, 0xa4, 0x11, 0xd5, 0x5c,
	0x56, 0x39, 0xb6, 0x01, 0x7b, 0x11, 0xce, 0xa8, 0xd4, 0xd2, 0xe0, 0xd8, 0x06, 0x8c, 0xcf, 0xa3,
	0xb1, 0x36, 0x01, 0xd8, 0x06, 0xec, 0x08, 0x30, 0x7a, 0xf1, 0xd8, 0xc6, 0xaa, 0xca, 0x28, 0x8c,
	0x21, 0x50, 0x35, 0x6f, 0xbc, 0x00, 0xb0, 0x57, 0x85, 0x52, 0x01, 0xa5, 0x43, 0xfe, 0x02, 0x80,
	0x2c, 0x94, 0x8b, 0x34, 0x91, 0x4a, 0x8c, 0xf5, 0x93, 0xce, 0x69, 0x0c, 0xfc, 0x8c, 0xa9, 0xc0,
	0x17, 0xdd, 0xe0, 0x05, 0x10, 0xbc, 0x20, 0x0f, 0x6c, 0xef, 0x95, 0x9c, 0xc7, 0xd7, 0xac, 0x51,
	0x98, 0x2f, 0xb2, 0xf6, 0xf7, 0x2d, 0x2b, 0x6c, 0x0f, 0xe0, 0x05, 0x67, 0x10, 0x53, 0x9a, 0x89,
	0xdd, 0xf9, 0x2c, 0xe8, 0xce, 0x4d, 0x55, 0xac, 0xda, 0x1b, 0x1b, 0x6d, 0x56, 0x0b, 0x6d, 0xb6,
	0x58, 0xbd, 0x73, 0x11, 0x4d, 0xc7, 0x52, 0xc4, 0x7e, 0x6d, 0xaf, 0xb6, 0xbf, 0xca, 0x73, 0x9a,
	0xea, 0x07, 0x52, 0x65, 0x60, 0x6a, 0x57, 0xa8, 0xc2, 0x65, 0xe8, 0xe0, 0x8c, 0xdd, 0x5f, 0x9c,
	0x8f, 0x76, 0xf0, 0xa7, 0x8c, 0xe5, 0x88, 0xd9, 0xc2, 0x83, 0xf2, 0x16, 0x72, 0x0e, 0x6e, 0x31,
	0x07, 0x7f, 0x5b, 0xa1, 0xa4, 0x52, 0x5f, 0xb6, 0x48, 0x25, 0x12, 0x9a, 0x78, 0xe6, 0xa1, 0xba,
	0xd0, 0x3b, 0xc1, 0x36, 0x60, 0xfd, 0x30, 0xbb, 0xd4, 0x19, 0x24, 0xb6, 0x21, 0x7c, 0xe8, 0x65,
	0xdd, 0x48, 0xe2, 0x45, 0xa8, 0x73, 0x22, 0x20, 0x18, 0x80, 0x68, 0x41, 0x8c, 0xa8, 0xc2, 0x57,
	0xe7, 0x86, 0x04, 0x7e, 0x90, 0x0f, 0xd9, 0x61, 0x6d, 0xbf, 0xc1, 0x89, 0x08, 0x4e, 0xc9, 0x15,
	0x97, 0x16, 0x41, 0x9b, 0x7b, 0x6a, 0x46, 0xd0, 0xbe, 0x5a, 0xd6, 0xbe, 0x4a, 0xfc, 0x46, 0xda,
	0xff, 0x9a, 0x0a, 0x40, 0x1c, 0x4d, 0x26, 0x42, 0x72, 0xf1, 0xfb, 0xb9, 0xc8, 0x94, 0xf7, 0x19,
	0xab, 0x75, 0x66, 0x74, 0x36, 0x5b, 0x07, 0x77, 0xb4, 0x18, 0xcd, 0xd3, 0x99, 0x8d, 0x39, 0xf4,
	0x5a, 0xf5, 0xcb, 0x06, 0x86, 0x63, 0x8f, 0x19, 0x33, 0x59, 0xa9, 0x0e, 0xea, 0x1a, 0xdc, 0x42,
	0xa0, 0x1f, 0x26, 0x7d, 0x31, 0x9f, 0xbd, 0x15, 0x52, 0xdf, 0x7c, 0x0b, 0x31, 0x86, 0x62, 0x18,
	0xfd, 0x8d, 0xe8, 0xc5, 0xfd, 0x43, 0xfd, 0x0e, 0x1c, 0x0c, 0x9c, 0x14, 0x55, 0x56, 0xf1, 0x31,
	0x34, 0xb8, 0xa6, 0x20, 0x3c, 0xef, 0xce, 0x25, 0x56, 0xb4, 0x7a, 0xf1, 0x50, 0x8c, 0x92, 0x78,
	0xac, 0xa3, 0xb4, 0x05, 0x3c, 0xf8, 0x9c, 0x8e, 0x31, 0xdf, 0x72, 0x96, 0x26, 0x71, 0x66, 0x47,
	0x97, 0xb8, 0x9d, 0xe0, 0x7b, 0x76, 0xc7, 0x62, 0xd3, 0xf3, 0x94, 0x98, 0x6e, 0xab, 0xb3, 0x06,
	0x7f, 0x57, 0xd5, 0x35, 0x5a, 0x92, 0xb0, 0x30, 0xd6, 0x67, 0xeb, 0xed, 0x73, 0x11, 0xab, 0x5c,
	0x89, 0x86, 0xfc, 0xa0, 0x26, 0xbf, 0x64, 0x6b, 0x43, 0x15, 0xaa, 0x39, 0x85, 0x10, 0x5b, 0x07,
	0xbb, 0xee, 0x09, 0x51, 0x1f, 0xd7, 0x3c, 0x70, 0x17, 0xdb, 0xf2, 0x9c, 0x8a, 0x0c, 0x0d, 0x8e,
	0xed, 0xd2, 0x59, 0xac, 0x2d, 0x9c, 0x85, 0xc7, 0x56, 0x40, 0xe7, 0xa8, 0xc3, 0x1a, 0xc7, 0xb6,
	0x6b, 0x6d, 0xea, 0xd8, 0xe1, 0x5a, 0x1b, 0x88, 0x39, 0xb0, 0xb3, 0x81, 0x9d, 0x39, 0x9d, 0xd7,
	0xaa, 0x68, 0x79, 0x79, 0xad, 0x2a, 0x23, 0x7a, 0x69, 0xad, 0x4a, 0x1f, 0x4e, 0xce, 0x53, 0x3a,
	0xb5, 0x6e, 0xf2, 0x2e, 0xb6, 0x8a, 0xe8, 0xc5, 0xa9, 0x7d, 0xce, 0xb6, 0x2d, 0xb6, 0xc1, 0x28,
	0x4c, 0xf1, 0x7d, 0x8e, 0x74, 0x70, 0xb7, 0xc9, 0xb1, 0x1d, 0xbc, 0x24, 0x69, 0xf9, 0xeb, 0x3e,
	0x4d, 0xce, 0xb9, 0xf8, 0xfd, 0x82, 0x49, 0xca, 0x4b, 0xf2, 0x64, 0x94, 0xca, 0x25, 0xf9, 0x9a,
	0x5d, 0x92, 0xff, 0x93, 0x65, 0x22, 0x33, 0x64, 0x4e, 0xce, 0xff, 0xf2, 0xad, 0x9e, 0x9e, 0x88,
	0xe0, 0x1f, 0xf5, 0xdd, 0x30, 0x9e, 0xc4, 0xf8, 0x88, 0x8a, 0xe5, 0x23, 0x2c, 0x7b, 0xd8, 0x2c,
	0xbc, 0x0b, 0x40, 0x35, 0x9d, 0x94, 0x18, 0xec, 0xa4, 0xf0, 0x24, 0xd0, 0x46, 0x6c, 0x58, 0x78,
	0x12, 0x68, 0xa3, 0xc7, 0x79, 0x15, 0x8d, 0x4d, 0x42, 0x03, 0x6d, 0xf4, 0x38, 0x80, 0xad, 0x6b,
	0x8f, 0xa3, 0xb1, 0xce, 0x6c, 0x9c, 0xf9, 0x75, 0x34, 0x3a, 0xd8, 0xc6, 0xb1, 0x49, 0x42, 0xf5,
	0xf7, 0x3a, 0xc7, 0x36, 0x60, 0xaf, 0x32, 0x21, 0x31, 0xd0, 0x6b, 0x70, 0x6c, 0x63, 0x92, 0x45,
	0xf7, 0x92, 0x12, 0x18, 0x73, 0x03, 0x7d, 0xb6, 0x8e, 0x9a, 0x6b, 0x2b, 0x8c, 0xe3, 0x6a, 0xdc,
	0x90, 0x56, 0x8a, 0xd4, 0xa4, 0x11, 0x44, 0x05, 0xdd, 0xdc, 0xdb, 0x16, 0xce, 0xe7, 0xe9, 0xa2,
	0xf3, 0xf1, 0x5c, 0xcb, 0x5d, 0xf6, 0x3b, 0x3f, 0x90, 0x71, 0xd3, 0xc9, 0x41, 0x77, 0x9a, 0x62,
	0x1a, 0xb9, 0x4c, 0xd7, 0x37, 0x24, 0xa9, 0xc1, 0x3f, 0x55, 0xc9, 0x95, 0xb8, 0x22, 0x68, 0x3d,
	0x60, 0xe3, 0x93, 0x71, 0x2e, 0x07, 0xab, 0xbb, 0x90, 0x4e, 0x8a, 0x49, 0x7b, 0xa4, 0x8c, 0x1c,
	0xa2, 0xe0, 0x75, 0xb4, 0xd3, 0x74, 0x7a, 0x6d, 0xcc, 0xff, 0x2a, 0xcf, 0x69, 0x18, 0xf3, 0x7a,
	0xda, 0x0f, 0x47, 0xf0, 0x9a, 0x41, 0xe7, 0x9a, 0xf2, 0xbe, 0x66, 0x75, 0x3d, 0x1f, 0xb9, 0x00,
	0xd7, 0x51, 0xb9, 0x2b, 0xe2, 0x39, 0x2b, 0x0c, 0x7b, 0x1d, 0x4e, 0x68, 0xd8, 0xda, 0x07, 0x87,
	0x19, 0x56, 0xd8, 0x8d, 0x8c, 0xc6, 0x99, 0xbf, 0xbe, 0x57, 0x83, 0xbb, 0x00, 0x6d, 0x38, 0xb7,
	0x77, 0xe1, 0x04, 0xe1, 0x3a, 0xc2, 0x86, 0xc4, 0xd8, 0x62, 0x3e, 0x15, 0xf8, 0xed, 0x84, 0xc2,
	0x87, 0x9c, 0x0e, 0xfe, 0xad, 0xe2, 0x24, 0xf0, 0x7a, 0x2a, 0x48, 0x80, 0x4e, 0x19, 0x2b, 0xa8,
	0x9b, 0xb3, 0xc5, 0x82, 0xe7, 0x49, 0xd1, 0xa4, 0x6c, 0xd1, 0x1a, 0xdf, 0xfa, 0x1d, 0xdb, 0x2e,
	0x75, 0x2f, 0xc9, 0x19, 0xbf, 0x72, 0x73, 0xc6, 0xc7, 0x37, 0xce, 0xb6, 0x90, 0x30, 0xfe, 0xc5,
	0xb2, 0x93, 0xa7, 0x69, 0x96, 0xdd, 0xa0, 0xf2, 0xd7, 0x3c, 0x88, 0x4f, 0x42, 0xa5, 0x84, 0xc4,
	0xa2, 0x77, 0x0d, 0xe3, 0x13, 0x4d, 0x07, 0x13, 0xf6, 0xe8, 0x06, 0xd1, 0x74, 0xb3, 0x8e, 0xd9,
	0x96, 0x05, 0x46, 0xf9, 0x75, 0xbf, 0x79, 0xf5, 0xa4, 0x9d, 0xd2, 0xa8, 0xe0, 0x8f, 0x97, 0x1f,
	0xc4, 0x08, 0x3f, 0xc7, 0x84, 0x23, 0xa3, 0xa7, 0x7e, 0x38, 0x0a, 0xfe, 0xca, 0x29, 0x1a, 0x14,
	0xac, 0xb4, 0xa0, 0xef, 0xd8, 0x46, 0x01, 0xdd, 0x52, 0x3a, 0x28, 0x98, 0xb8, 0x3d, 0x20, 0xf8,
	0x8f, 0x0a, 0xbb, 0x67, 0xa7, 0xe9, 0xfa, 0xa9, 0xde, 0xf4, 0x1a, 0x4d, 0x44, 0x55, 0xb5, 0x22,
	0xaa, 0xe2, 0x85, 0xd6, 0x6c, 0x4b, 0x81, 0x91, 0xac, 0x14, 0xa1, 0x12, 0xe3, 0xb6, 0xd2, 0xc5,
	0xf6, 0x02, 0x80, 0x53, 0x78, 0x95, 0x8e, 0x43, 0x25, 0xda, 0x4a, 0x17, 0xd9, 0x73, 0x1a, 0x46,
	0x62, 0x72, 0x86, 0xd3, 0x53, 0x38, 0x51, 0x00, 0x70, 0xf7, 0x3b, 0x93, 0x73, 0xbc, 0xe0, 0xeb,
	0xe4, 0x9d, 0x35, 0x19, 0x70, 0xf6, 0x70, 0xf9, 0x5e, 0x48, 0x57, 0xbf, 0x76, 0x0b, 0x2c, 0x1f,
	0x2f, 0xa9, 0x52, 0x14, 0x43, 0x4c, 0x85, 0xe5, 0xbf, 0x74, 0x6c, 0xa9, 0x39, 0x30, 0x44, 0x03,
	0xed, 0x3c, 0x62, 0x0d, 0x2e, 0x46, 0x73, 0x99, 0x45, 0x57, 0xa4, 0xa2, 0x3a, 0x2f, 0x00, 0x2b,
	0x1a, 0xaa, 0x3a, 0xd1, 0x90, 0xd1, 0x5f, 0xcd, 0xd2, 0xdf, 0x2e, 0x5b, 0xe5, 0xe2, 0x5c, 0xbc,
	0xd7, 0xc1, 0x32, 0x11, 0xa0, 0x9f, 0x43, 0x71, 0x11, 0x5e, 0x45, 0x89, 0xd4, 0xf1, 0x41, 0x4e,
	0x7f, 0x40, 0x3f, 0x9e, 0x2e, 0x4b, 0xad, 0x93, 0x9f, 0x80, 0xb6, 0xad, 0xb3, 0xba, 0xab, 0xb3,
	0x53, 0xa7, 0x80, 0x64, 0xb6, 0x97, 0x47, 0xad, 0xb6, 0xc2, 0x5a, 0x8b, 0x0a, 0x33, 0xfc, 0x46,
	0x5b, 0xff, 0x50, 0x65, 0x0f, 0xa0, 0x3b, 0x0f, 0x89, 0x62, 0x25, 0xe4, 0x48, 0xa4, 0xf4, 0x4d,
	0xd8, 0x94, 0xee, 0x4c, 0x3c, 0x6e, 0x30, 0x91, 0xeb, 0x09, 0xdb, 0xf8, 0x08, 0xda, 0x1d, 0x5d,
	0x26, 0x84, 0x26, 0xe8, 0xe8, 0x55, 0x07, 0x30, 0xaa, 0x11, 0x12, 0x01, 0xe8, 0x61, 0xa7, 0xf8,
	0xe6, 0x4d, 0x04, 0xe8, 0xbe, 0x17, 0xe7, 0x25, 0xc2, 0x06, 0xd7, 0x14, 0xe0, 0x47, 0xef, 0x11,
	0xa7, 0x6b, 0xa3, 0x29, 0xfc, 0xd4, 0x81, 0x1c, 0xb4, 0x57, 0xd2, 0x8f, 0x0d, 0x01, 0x07, 0xf1,
	0x12, 0x07, 0x99, 0x55, 0x1b, 0x82, 0x54, 0xf5, 0x48, 0xff, 0xa5, 0x81, 0x78, 0xc8, 0xf9, 0xba,
	0x60, 0xf0, 0xf7, 0xda, 0xfe, 0x2e, 0x68, 0x67, 0x21, 0x02, 0xc5, 0x3d, 0x4c, 0xa3, 0x98, 0xac,
	0x63, 0x9d, 0x6b, 0x0a, 0xa2, 0xc3, 0x97, 0xf3, 0x50, 0x86, 0x31, 0xe4, 0xbe, 0x3a, 0x5d, 0xb1,
	0x10, 0xef, 0x1b, 0x2a, 0x84, 0x92, 0xc3, 0xda, 0x38, 0xd8, 0xb3, 0x4e, 0x6c, 0xe9, 0x91, 0x50,
	0xa9, 0x34, 0x83, 0x88, 0xb8, 0x01, 0x4c, 0xf8, 0x7d, 0x01, 0x6e, 0x0b, 0x36, 0xf2, 0x9a, 0xae,
	0x21, 0x6f, 0xfd, 0xf7, 0xc2, 0x3d, 0xb6, 0x06, 0xa7, 0x97, 0xd7, 0x77, 0x35, 0x05, 0xa7, 0x84,
	0x5f, 0xf9, 0xcc, 0xff, 0x24, 0x90, 0x80, 0x3b, 0x7c, 0x1a, 0x66, 0x8a, 0x7a, 0x28, 0x1c, 0x2a,
	0x80, 0xfc, 0x4b, 0xf7, 0x9a, 0xfb, 0xa5, 0x7b, 0x98, 0x86, 0xb1, 0x89, 0x89, 0xa0, 0x8d, 0x9f,
	0xb1, 0xd2, 0x54, 0x48, 0x8a, 0xfa, 0x28, 0x97, 0xb6, 0x10, 0xe8, 0x3f, 0x4d, 0xde, 0x99, 0x7e,
	0xfd, 0x2f, 0x85, 0x02, 0x31, 0xdf, 0xc3, 0x59, 0xfe, 0x3d, 0x3c, 0x78, 0xc6, 0xb6, 0x72, 0x45,
	0xd0, 0x2b, 0xd8, 0x67, 0x6b, 0xfa, 0x3b, 0x0c, 0x3d, 0x83, 0x1d, 0x4b, 0xa9, 0xd8, 0xc1, 0x75,
	0x7f, 0xf0, 0x19, 0x6b, 0xa2, 0xa6, 0xa7, 0xbd, 0x6e, 0x1e, 0x88, 0xbc, 0xa6, 0x3f, 0xa8, 0xe0,
	0x53, 0x84, 0xf6, 0x17, 0x87, 0x8c, 0x15, 0xf9, 0x9a, 0xb7, 0xc3, 0x36, 0x31, 0xe2, 0xd2, 0xd0,
	0xce, 0xcf, 0xbc, 0x6d, 0xb6, 0x01, 0xe1, 0xb9, 0x01, 0x2a, 0xde, 0x1d, 0xd6, 0xe4, 0x62, 0x96,
	0x5c, 0x09, 0x03, 0x55, 0xbf, 0xf8, 0x9a, 0x35, 0x9d, 0x8c, 0xc2, 0x63, 0x6c, 0xed, 0x38, 0x8c,
	0xa6, 0x62, 0xbc, 0xf3, 0x33, 0x6f, 0x83, 0xad, 0xf3, 0x79, 0x1c, 0x47, 0xf1, 0xf9, 0x4e, 0x05,
	0x08, 0x90, 0x96, 0x8a, 0xf1, 0x4e, 0xf5, 0xe0, 0x94, 0x79, 0xe6, 0x42, 0x76, 0xc2, 0x74, 0x48,
	0x7f, 0xbd, 0xf1, 0xbe, 0x61, 0x3b, 0xbd, 0xec, 0x84, 0x0f, 0x3a, 0x9d, 0x64, 0x96, 0x4a, 0x88,
	0xcf, 0xc6, 0xde, 0x96, 0xde, 0x23, 0x1f, 0x74, 0x7e, 0x9b, 0x44, 0xe3, 0x96, 0x1d, 0xce, 0x1d,
	0x26, 0xc9, 0x54, 0x84, 0xf1, 0xc1, 0xbf, 0x6f, 0xb1, 0x6d, 0x23, 0xce, 0xc8, 0xfa, 0x23, 0xb6,
	0x82, 0xff, 0xcd, 0xd9, 0xb6, 0xf8, 0x01, 0x68, 0x95, 0x04, 0x7a, 0xdf, 0xb1, 0xad, 0x13, 0xa1,
	0x74, 0xa9, 0xf2, 0x34, 0xca, 0x94, 0x77, 0xc7, 0xcd, 0x89, 0x95, 0x90, 0xad, 0xfb, 0x8b, 0xdf,
	0xc8, 0x51, 0xaf, 0x4f, 0x2b, 0xde, 0xaf, 0xd8, 0x66, 0x67, 0x2a, 0x42, 0xf3, 0x61, 0x69, 0xd9,
	0xe8, 0xf2, 0x94, 0xbf, 0x64, 0x75, 0x98, 0x52, 0x85, 0x2a, 0x5b, 0xc6, 0x6e, 0x1f, 0x2b, 0x31,
	0x7d, 0xcb, 0x9a, 0x27, 0x42, 0xa1, 0x61, 0x25, 0x60, 0xd7, 0x7e, 0x4e, 0xe6, 0x90, 0x97, 0x0c,
	0xfc, 0x8e, 0xdd, 0x29, 0x36, 0x67, 0xbe, 0x70, 0x97, 0x55, 0xfa, 0x60, 0x71, 0x73, 0x86, 0xf5,
	0x07, 0xe6, 0x9d, 0x08, 0x55, 0xfe, 0x44, 0x5e, 0x16, 0xe0, 0x98, 0xe3, 0x12, 0xef, 0x8f, 0xec,
	0x23, 0x90, 0x50, 0xae, 0xbd, 0x2f, 0xdd, 0xf8, 0x27, 0x1f, 0xf8, 0x2a, 0xe0, 0x7d, 0xcb, 0x36,
	0x9d, 0xda, 0x7c, 0x79, 0x21, 0x0b, 0x85, 0x26, 0xc3, 0xf8, 0x3d, 0xdb, 0xb6, 0x0b, 0x4f, 0x20,
	0xab, 0x3c, 0xf6, 0xd1, 0x0d, 0x45, 0x2a, 0x7a, 0x3f, 0x1d, 0xac, 0x22, 0x5b, 0x65, 0x9f, 0x65,
	0x22, 0x1e, 0xdf, 0x58, 0x24, 0x32, 0x42, 0xec, 0x07, 0xf7, 0x60, 0x49, 0x2e, 0x4b, 0xb5, 0x15,
	0x47, 0xa1, 0xe5, 0x1a, 0xc4, 0x0f, 0x6c, 0x03, 0x8e, 0x54, 0xe7, 0xbc, 0x9e, 0xbf, 0xc8, 0xba,
	0xec, 0xce, 0xda, 0x69, 0xf5, 0x31, 0xdd, 0x78, 0x2b, 0xfd, 0x5d, 0x32, 0x9f, 0xc9, 0x9e, 0x5b,
	0xf7, 0x16, 0xfb, 0x60, 0xcc, 0xd3, 0x8a, 0x77, 0xca, 0x76, 0x4e, 0x84, 0xb2, 0x93, 0xd9, 0xcc,
	0x91, 0x54, 0xca, 0x9c, 0x5b, 0x37, 0xf7, 0x65, 0x4f, 0x2b, 0xde, 0x53, 0xb6, 0xc5, 0xe7, 0x71,
	0x37, 0x19, 0x5d, 0x0a, 0x79, 0x28, 0xe2, 0xd1, 0xc5, 0x82, 0x7a, 0xcb, 0xcf, 0xe8, 0x2b, 0xe6,
	0xf1, 0x79, 0xfc, 0xe3, 0xfc, 0xad, 0x90, 0xb1, 0x50, 0x22, 0xfb, 0x69, 0xa3, 0x9e, 0xe3, 0x95,
	0x2e, 0x17, 0xe8, 0x3e, 0x70, 0x1b, 0x97, 0x96, 0xd2, 0x7e, 0xc3, 0xd8, 0x89, 0x50, 0x26, 0x3d,
	0xff, 0x80, 0xd5, 0x70, 0x6e, 0xd3, 0xf7, 0xf8, 0x2c, 0x35, 0xf4, 0x3c, 0xca, 0x54, 0x22, 0xaf,
	0xff, 0x20, 0x01, 0x47, 0xf4, 0x2e, 0x9d, 0x88, 0x7a, 0xe9, 0x12, 0x6e, 0x0b, 0xc0, 0x53, 0x8f,
	0x33, 0x7f, 0x41, 0x8c, 0x4e, 0x0c, 0x96, 0x09, 0xfb, 0xec, 0xf6, 0xdc, 0x82, 0x96, 0xd6, 0xb7,
	0x1f, 0xbc, 0x15, 0xe0, 0x2f, 0x13, 0xf8, 0xe9, 0x6d, 0xe9, 0x01, 0x89, 0xfb, 0x2d, 0xfb, 0xb8,
	0x10, 0x97, 0xff, 0xa3, 0xc5, 0x4a, 0x0e, 0x96, 0x88, 0x0d, 0x6e, 0x8d, 0xa7, 0x49, 0xee, 0x80,
	0xb5, 0x16, 0xe5, 0xe6, 0x31, 0xf5, 0x4f, 0x33, 0x4e, 0x6e, 0x8c, 0xfa, 0x1c, 0x37, 0x9e, 0x5f,
	0xec, 0x22, 0xa4, 0xfa, 0xc0, 0xb1, 0x2c, 0xc6, 0x60, 0xcf, 0xd8, 0xe6, 0x89, 0x50, 0xe8, 0xca,
	0x6f, 0x72, 0x48, 0x1f, 0x95, 0x5d, 0xbf, 0x71, 0x47, 0x7f, 0x86, 0x26, 0x72, 0x12, 0x4d, 0xa3,
	0xf8, 0x1c, 0xac, 0xcc, 0x43, 0xf7, 0x0a, 0x51, 0x87, 0xb1, 0x33, 0xa5, 0xb7, 0x71, 0xf0, 0x92,
	0xdd, 0xcd, 0xfd, 0xe8, 0x28, 0x8c, 0x8d, 0x2f, 0x7d, 0xc6, 0x36, 0x81, 0xd4, 0xcf, 0x26, 0xcb,
	0x2d, 0x17, 0x80, 0xda, 0xc1, 0x1b, 0x89, 0xdb, 0x56, 0x17, 0xb8, 0x82, 0xb7, 0x6b, 0xf8, 0x77,
	0xd9, 0x5f, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x98, 0xab, 0xe7, 0x69, 0x2b, 0x00,
	0x00,
}
