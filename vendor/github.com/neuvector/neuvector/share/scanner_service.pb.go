// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scanner_service.proto

package share

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScanImageRequest struct {
	Registry             string                 `protobuf:"bytes,1,opt,name=Registry,proto3" json:"Registry,omitempty"`
	Username             string                 `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Password             string                 `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	Repository           string                 `protobuf:"bytes,4,opt,name=Repository,proto3" json:"Repository,omitempty"`
	Tag                  string                 `protobuf:"bytes,5,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Proxy                string                 `protobuf:"bytes,6,opt,name=Proxy,proto3" json:"Proxy,omitempty"`
	ScanLayers           bool                   `protobuf:"varint,7,opt,name=ScanLayers,proto3" json:"ScanLayers,omitempty"`
	ScanSecrets          bool                   `protobuf:"varint,8,opt,name=ScanSecrets,proto3" json:"ScanSecrets,omitempty"`
	BaseImage            string                 `protobuf:"bytes,9,opt,name=BaseImage,proto3" json:"BaseImage,omitempty"`
	RootsOfTrust         []*SigstoreRootOfTrust `protobuf:"bytes,10,rep,name=RootsOfTrust,proto3" json:"RootsOfTrust,omitempty"`
	Token                string                 `protobuf:"bytes,11,opt,name=Token,proto3" json:"Token,omitempty"`
	ScanTypesRequested   *ScanTypeMap           `protobuf:"bytes,12,opt,name=ScanTypesRequested,proto3" json:"ScanTypesRequested,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ScanImageRequest) Reset()         { *m = ScanImageRequest{} }
func (m *ScanImageRequest) String() string { return proto.CompactTextString(m) }
func (*ScanImageRequest) ProtoMessage()    {}
func (*ScanImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scanner_service_03fd96935b43d393, []int{0}
}
func (m *ScanImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScanImageRequest.Unmarshal(m, b)
}
func (m *ScanImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScanImageRequest.Marshal(b, m, deterministic)
}
func (dst *ScanImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScanImageRequest.Merge(dst, src)
}
func (m *ScanImageRequest) XXX_Size() int {
	return xxx_messageInfo_ScanImageRequest.Size(m)
}
func (m *ScanImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScanImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScanImageRequest proto.InternalMessageInfo

func (m *ScanImageRequest) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *ScanImageRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ScanImageRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ScanImageRequest) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *ScanImageRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ScanImageRequest) GetProxy() string {
	if m != nil {
		return m.Proxy
	}
	return ""
}

func (m *ScanImageRequest) GetScanLayers() bool {
	if m != nil {
		return m.ScanLayers
	}
	return false
}

func (m *ScanImageRequest) GetScanSecrets() bool {
	if m != nil {
		return m.ScanSecrets
	}
	return false
}

func (m *ScanImageRequest) GetBaseImage() string {
	if m != nil {
		return m.BaseImage
	}
	return ""
}

func (m *ScanImageRequest) GetRootsOfTrust() []*SigstoreRootOfTrust {
	if m != nil {
		return m.RootsOfTrust
	}
	return nil
}

func (m *ScanImageRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ScanImageRequest) GetScanTypesRequested() *ScanTypeMap {
	if m != nil {
		return m.ScanTypesRequested
	}
	return nil
}

type SigstoreRootOfTrust struct {
	Name                 string              `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	RekorPublicKey       string              `protobuf:"bytes,2,opt,name=RekorPublicKey,proto3" json:"RekorPublicKey,omitempty"`
	RootCert             string              `protobuf:"bytes,3,opt,name=RootCert,proto3" json:"RootCert,omitempty"`
	SCTPublicKey         string              `protobuf:"bytes,4,opt,name=SCTPublicKey,proto3" json:"SCTPublicKey,omitempty"`
	Verifiers            []*SigstoreVerifier `protobuf:"bytes,5,rep,name=Verifiers,proto3" json:"Verifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SigstoreRootOfTrust) Reset()         { *m = SigstoreRootOfTrust{} }
func (m *SigstoreRootOfTrust) String() string { return proto.CompactTextString(m) }
func (*SigstoreRootOfTrust) ProtoMessage()    {}
func (*SigstoreRootOfTrust) Descriptor() ([]byte, []int) {
	return fileDescriptor_scanner_service_03fd96935b43d393, []int{1}
}
func (m *SigstoreRootOfTrust) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigstoreRootOfTrust.Unmarshal(m, b)
}
func (m *SigstoreRootOfTrust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigstoreRootOfTrust.Marshal(b, m, deterministic)
}
func (dst *SigstoreRootOfTrust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigstoreRootOfTrust.Merge(dst, src)
}
func (m *SigstoreRootOfTrust) XXX_Size() int {
	return xxx_messageInfo_SigstoreRootOfTrust.Size(m)
}
func (m *SigstoreRootOfTrust) XXX_DiscardUnknown() {
	xxx_messageInfo_SigstoreRootOfTrust.DiscardUnknown(m)
}

var xxx_messageInfo_SigstoreRootOfTrust proto.InternalMessageInfo

func (m *SigstoreRootOfTrust) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetRekorPublicKey() string {
	if m != nil {
		return m.RekorPublicKey
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetRootCert() string {
	if m != nil {
		return m.RootCert
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetSCTPublicKey() string {
	if m != nil {
		return m.SCTPublicKey
	}
	return ""
}

func (m *SigstoreRootOfTrust) GetVerifiers() []*SigstoreVerifier {
	if m != nil {
		return m.Verifiers
	}
	return nil
}

type SigstoreVerifier struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 string                  `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	KeypairOptions       *SigstoreKeypairOptions `protobuf:"bytes,3,opt,name=KeypairOptions,proto3" json:"KeypairOptions,omitempty"`
	KeylessOptions       *SigstoreKeylessOptions `protobuf:"bytes,4,opt,name=KeylessOptions,proto3" json:"KeylessOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SigstoreVerifier) Reset()         { *m = SigstoreVerifier{} }
func (m *SigstoreVerifier) String() string { return proto.CompactTextString(m) }
func (*SigstoreVerifier) ProtoMessage()    {}
func (*SigstoreVerifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_scanner_service_03fd96935b43d393, []int{2}
}
func (m *SigstoreVerifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigstoreVerifier.Unmarshal(m, b)
}
func (m *SigstoreVerifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigstoreVerifier.Marshal(b, m, deterministic)
}
func (dst *SigstoreVerifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigstoreVerifier.Merge(dst, src)
}
func (m *SigstoreVerifier) XXX_Size() int {
	return xxx_messageInfo_SigstoreVerifier.Size(m)
}
func (m *SigstoreVerifier) XXX_DiscardUnknown() {
	xxx_messageInfo_SigstoreVerifier.DiscardUnknown(m)
}

var xxx_messageInfo_SigstoreVerifier proto.InternalMessageInfo

func (m *SigstoreVerifier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SigstoreVerifier) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SigstoreVerifier) GetKeypairOptions() *SigstoreKeypairOptions {
	if m != nil {
		return m.KeypairOptions
	}
	return nil
}

func (m *SigstoreVerifier) GetKeylessOptions() *SigstoreKeylessOptions {
	if m != nil {
		return m.KeylessOptions
	}
	return nil
}

type SigstoreKeypairOptions struct {
	PublicKey            string   `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigstoreKeypairOptions) Reset()         { *m = SigstoreKeypairOptions{} }
func (m *SigstoreKeypairOptions) String() string { return proto.CompactTextString(m) }
func (*SigstoreKeypairOptions) ProtoMessage()    {}
func (*SigstoreKeypairOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_scanner_service_03fd96935b43d393, []int{3}
}
func (m *SigstoreKeypairOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigstoreKeypairOptions.Unmarshal(m, b)
}
func (m *SigstoreKeypairOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigstoreKeypairOptions.Marshal(b, m, deterministic)
}
func (dst *SigstoreKeypairOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigstoreKeypairOptions.Merge(dst, src)
}
func (m *SigstoreKeypairOptions) XXX_Size() int {
	return xxx_messageInfo_SigstoreKeypairOptions.Size(m)
}
func (m *SigstoreKeypairOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SigstoreKeypairOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SigstoreKeypairOptions proto.InternalMessageInfo

func (m *SigstoreKeypairOptions) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type SigstoreKeylessOptions struct {
	CertIssuer           string   `protobuf:"bytes,1,opt,name=CertIssuer,proto3" json:"CertIssuer,omitempty"`
	CertSubject          string   `protobuf:"bytes,2,opt,name=CertSubject,proto3" json:"CertSubject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigstoreKeylessOptions) Reset()         { *m = SigstoreKeylessOptions{} }
func (m *SigstoreKeylessOptions) String() string { return proto.CompactTextString(m) }
func (*SigstoreKeylessOptions) ProtoMessage()    {}
func (*SigstoreKeylessOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_scanner_service_03fd96935b43d393, []int{4}
}
func (m *SigstoreKeylessOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigstoreKeylessOptions.Unmarshal(m, b)
}
func (m *SigstoreKeylessOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigstoreKeylessOptions.Marshal(b, m, deterministic)
}
func (dst *SigstoreKeylessOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigstoreKeylessOptions.Merge(dst, src)
}
func (m *SigstoreKeylessOptions) XXX_Size() int {
	return xxx_messageInfo_SigstoreKeylessOptions.Size(m)
}
func (m *SigstoreKeylessOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_SigstoreKeylessOptions.DiscardUnknown(m)
}

var xxx_messageInfo_SigstoreKeylessOptions proto.InternalMessageInfo

func (m *SigstoreKeylessOptions) GetCertIssuer() string {
	if m != nil {
		return m.CertIssuer
	}
	return ""
}

func (m *SigstoreKeylessOptions) GetCertSubject() string {
	if m != nil {
		return m.CertSubject
	}
	return ""
}

func init() {
	proto.RegisterType((*ScanImageRequest)(nil), "share.ScanImageRequest")
	proto.RegisterType((*SigstoreRootOfTrust)(nil), "share.SigstoreRootOfTrust")
	proto.RegisterType((*SigstoreVerifier)(nil), "share.SigstoreVerifier")
	proto.RegisterType((*SigstoreKeypairOptions)(nil), "share.SigstoreKeypairOptions")
	proto.RegisterType((*SigstoreKeylessOptions)(nil), "share.SigstoreKeylessOptions")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScannerServiceClient is the client API for ScannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScannerServiceClient interface {
	ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error)
	ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error)
	ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error)
	Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error)
	ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error)
}

type scannerServiceClient struct {
	cc *grpc.ClientConn
}

func NewScannerServiceClient(cc *grpc.ClientConn) ScannerServiceClient {
	return &scannerServiceClient{cc}
}

func (c *scannerServiceClient) ScanRunning(ctx context.Context, in *ScanRunningRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, "/share.ScannerService/ScanRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImageData(ctx context.Context, in *ScanData, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, "/share.ScannerService/ScanImageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanImage(ctx context.Context, in *ScanImageRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, "/share.ScannerService/ScanImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAppPackage(ctx context.Context, in *ScanAppRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, "/share.ScannerService/ScanAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) Ping(ctx context.Context, in *RPCVoid, opts ...grpc.CallOption) (*RPCVoid, error) {
	out := new(RPCVoid)
	err := c.cc.Invoke(ctx, "/share.ScannerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannerServiceClient) ScanAwsLambda(ctx context.Context, in *ScanAwsLambdaRequest, opts ...grpc.CallOption) (*ScanResult, error) {
	out := new(ScanResult)
	err := c.cc.Invoke(ctx, "/share.ScannerService/ScanAwsLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannerServiceServer is the server API for ScannerService service.
type ScannerServiceServer interface {
	ScanRunning(context.Context, *ScanRunningRequest) (*ScanResult, error)
	ScanImageData(context.Context, *ScanData) (*ScanResult, error)
	ScanImage(context.Context, *ScanImageRequest) (*ScanResult, error)
	ScanAppPackage(context.Context, *ScanAppRequest) (*ScanResult, error)
	Ping(context.Context, *RPCVoid) (*RPCVoid, error)
	ScanAwsLambda(context.Context, *ScanAwsLambdaRequest) (*ScanResult, error)
}

func RegisterScannerServiceServer(s *grpc.Server, srv ScannerServiceServer) {
	s.RegisterService(&_ScannerService_serviceDesc, srv)
}

func _ScannerService_ScanRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanRunning(ctx, req.(*ScanRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImageData(ctx, req.(*ScanData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanImage(ctx, req.(*ScanImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAppPackage(ctx, req.(*ScanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).Ping(ctx, req.(*RPCVoid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScannerService_ScanAwsLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAwsLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share.ScannerService/ScanAwsLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannerServiceServer).ScanAwsLambda(ctx, req.(*ScanAwsLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScannerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "share.ScannerService",
	HandlerType: (*ScannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanRunning",
			Handler:    _ScannerService_ScanRunning_Handler,
		},
		{
			MethodName: "ScanImageData",
			Handler:    _ScannerService_ScanImageData_Handler,
		},
		{
			MethodName: "ScanImage",
			Handler:    _ScannerService_ScanImage_Handler,
		},
		{
			MethodName: "ScanAppPackage",
			Handler:    _ScannerService_ScanAppPackage_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ScannerService_Ping_Handler,
		},
		{
			MethodName: "ScanAwsLambda",
			Handler:    _ScannerService_ScanAwsLambda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanner_service.proto",
}

func init() {
	proto.RegisterFile("scanner_service.proto", fileDescriptor_scanner_service_03fd96935b43d393)
}

var fileDescriptor_scanner_service_03fd96935b43d393 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x6e, 0xd3, 0x4a,
	0x10, 0x56, 0x9a, 0xa4, 0xa7, 0x99, 0xe4, 0xe4, 0xf4, 0x0c, 0x94, 0x9a, 0xf0, 0xa3, 0x28, 0x17,
	0x55, 0xae, 0x7a, 0x91, 0x0a, 0x90, 0x40, 0x02, 0xb5, 0x85, 0x8b, 0xaa, 0x85, 0x46, 0xeb, 0xd0,
	0x0b, 0x6e, 0xd0, 0xc6, 0x99, 0x06, 0xd3, 0xc6, 0x6b, 0x76, 0xd7, 0x14, 0xbf, 0x11, 0x8f, 0xc2,
	0x63, 0xf0, 0x28, 0x68, 0x77, 0xed, 0x66, 0x63, 0xa5, 0xdc, 0x79, 0xbe, 0xef, 0x9b, 0xd9, 0xf9,
	0xf3, 0xc0, 0x8e, 0x8a, 0x78, 0x92, 0x90, 0xfc, 0xac, 0x48, 0x7e, 0x8f, 0x23, 0xda, 0x4f, 0xa5,
	0xd0, 0x02, 0x9b, 0xea, 0x0b, 0x97, 0xd4, 0xeb, 0x44, 0x62, 0xb1, 0x10, 0x89, 0x03, 0x7b, 0x60,
	0xb4, 0xee, 0x7b, 0xf0, 0xb3, 0x0e, 0xdb, 0x61, 0xc4, 0x93, 0x93, 0x05, 0x9f, 0x13, 0xa3, 0x6f,
	0x19, 0x29, 0x8d, 0x3d, 0xd8, 0x62, 0x34, 0x8f, 0x95, 0x96, 0x79, 0x50, 0xeb, 0xd7, 0x86, 0x2d,
	0x76, 0x6b, 0x1b, 0xee, 0xa3, 0x22, 0x99, 0xf0, 0x05, 0x05, 0x1b, 0x8e, 0x2b, 0x6d, 0xc3, 0x8d,
	0xb9, 0x52, 0x37, 0x42, 0xce, 0x82, 0xba, 0xe3, 0x4a, 0x1b, 0x9f, 0x02, 0x30, 0x4a, 0x85, 0x8a,
	0xb5, 0x90, 0x79, 0xd0, 0xb0, 0xac, 0x87, 0xe0, 0x36, 0xd4, 0x27, 0x7c, 0x1e, 0x34, 0x2d, 0x61,
	0x3e, 0xf1, 0x3e, 0x34, 0xc7, 0x52, 0xfc, 0xc8, 0x83, 0x4d, 0x8b, 0x39, 0xc3, 0xc4, 0x31, 0xf9,
	0x9e, 0xf1, 0x9c, 0xa4, 0x0a, 0xfe, 0xe9, 0xd7, 0x86, 0x5b, 0xcc, 0x43, 0xb0, 0x0f, 0x6d, 0x63,
	0x85, 0x14, 0x49, 0xd2, 0x2a, 0xd8, 0xb2, 0x02, 0x1f, 0xc2, 0xc7, 0xd0, 0x3a, 0xe2, 0x8a, 0x6c,
	0xc5, 0x41, 0xcb, 0xc6, 0x5e, 0x02, 0xf8, 0x1a, 0x3a, 0x4c, 0x08, 0xad, 0xce, 0x2f, 0x27, 0x32,
	0x53, 0x3a, 0x80, 0x7e, 0x7d, 0xd8, 0x1e, 0xf5, 0xf6, 0x6d, 0x23, 0xf7, 0xc3, 0x78, 0xae, 0xb4,
	0x90, 0x64, 0x24, 0x85, 0x82, 0xad, 0xe8, 0x4d, 0xd6, 0x13, 0x71, 0x45, 0x49, 0xd0, 0x76, 0x59,
	0x5b, 0x03, 0x8f, 0x00, 0x4d, 0x0a, 0x93, 0x3c, 0x25, 0x55, 0x74, 0x99, 0x66, 0x41, 0xa7, 0x5f,
	0x1b, 0xb6, 0x47, 0x58, 0xc6, 0x2e, 0x04, 0xef, 0x79, 0xca, 0xd6, 0xa8, 0x07, 0xbf, 0x6a, 0x70,
	0x6f, 0xcd, 0xfb, 0x88, 0xd0, 0xf8, 0x60, 0xa6, 0xe1, 0x26, 0x65, 0xbf, 0x71, 0x0f, 0xba, 0x8c,
	0xae, 0x84, 0x1c, 0x67, 0xd3, 0xeb, 0x38, 0x3a, 0xa5, 0xbc, 0x98, 0x55, 0x05, 0xb5, 0x93, 0x16,
	0x42, 0x1f, 0x93, 0xd4, 0xe5, 0xc4, 0x4a, 0x1b, 0x07, 0xd0, 0x09, 0x8f, 0x27, 0xcb, 0x08, 0x6e,
	0x66, 0x2b, 0x18, 0x3e, 0x83, 0xd6, 0x05, 0xc9, 0xf8, 0x32, 0x36, 0xc3, 0x68, 0xda, 0x56, 0xed,
	0x56, 0x5a, 0x55, 0xf2, 0x6c, 0xa9, 0x34, 0xa5, 0x6c, 0x57, 0xf9, 0xb5, 0x75, 0x20, 0x34, 0x4c,
	0x17, 0x8a, 0xec, 0xed, 0x37, 0xbe, 0x83, 0xee, 0x29, 0xe5, 0x29, 0x8f, 0xe5, 0x79, 0xaa, 0x63,
	0x91, 0x28, 0x9b, 0x79, 0x7b, 0xf4, 0xa4, 0xf2, 0xf0, 0xaa, 0x88, 0x55, 0x9c, 0x8a, 0x30, 0xd7,
	0xa4, 0x54, 0x19, 0xa6, 0x71, 0x57, 0x18, 0x4f, 0xc4, 0x2a, 0x4e, 0x83, 0xe7, 0xf0, 0x60, 0xfd,
	0x83, 0x66, 0xcf, 0x96, 0xcd, 0x73, 0x45, 0x2d, 0x81, 0xc1, 0xa7, 0x15, 0x3f, 0x2f, 0xa2, 0xd9,
	0x70, 0xd3, 0xff, 0x13, 0xa5, 0x32, 0x92, 0x85, 0xa3, 0x87, 0x98, 0x0d, 0x37, 0x56, 0x98, 0x4d,
	0xbf, 0x52, 0xa4, 0x8b, 0xd6, 0xf8, 0xd0, 0xe8, 0xf7, 0x06, 0x74, 0x43, 0x77, 0x0f, 0x42, 0x77,
	0x0e, 0xf0, 0x95, 0xfb, 0x2d, 0x58, 0x96, 0x24, 0x71, 0x32, 0xc7, 0x87, 0xde, 0xce, 0x15, 0x58,
	0xb1, 0x68, 0xbd, 0xff, 0x7d, 0x8a, 0x54, 0x76, 0xad, 0xf1, 0x00, 0xfe, 0xbd, 0xbd, 0x11, 0x6f,
	0xb9, 0xe6, 0xf8, 0x9f, 0xa7, 0x31, 0xc0, 0x3a, 0xa7, 0x17, 0xd0, 0xba, 0x75, 0xc2, 0x5d, 0x8f,
	0xf7, 0x4f, 0xcd, 0x3a, 0xc7, 0x97, 0x2e, 0xf9, 0xc3, 0x34, 0x1d, 0xf3, 0xe8, 0xca, 0x78, 0xef,
	0x78, 0xa2, 0xc3, 0x34, 0xfd, 0x8b, 0xef, 0x1e, 0x34, 0xc6, 0xa6, 0xbe, 0x6e, 0x41, 0xb1, 0xf1,
	0xf1, 0x85, 0x88, 0x67, 0xbd, 0x8a, 0x8d, 0x6f, 0x5c, 0x45, 0x87, 0x37, 0xea, 0x8c, 0x2f, 0xa6,
	0x33, 0x8e, 0x8f, 0xfc, 0x27, 0x4a, 0xf4, 0xee, 0x87, 0xa6, 0x9b, 0xf6, 0x7c, 0x1e, 0xfc, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xbc, 0x45, 0x6a, 0xb3, 0x78, 0x05, 0x00, 0x00,
}
